package robocorp.robot.intellij;

import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.NlsContexts;
import com.intellij.ui.components.JBLabel;
import com.intellij.ui.components.JBTextArea;
import com.intellij.ui.components.JBTextField;
import com.intellij.util.ui.FormBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import robocorp.lsp.intellij.LanguageServerDefinition;

import javax.swing.*;


// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
class RobotPreferencesComponent {

    private final JPanel panel;
    
    private final JBTextField robotLanguageServerPython = new JBTextField();
    private final JBTextField robotLanguageServerArgs = new JBTextField();
    private final JBTextField robotLanguageServerTcpPort = new JBTextField();
    private final JBTextField robotPythonExecutable = new JBTextField();
    private final JBTextField robotPythonEnv = new JBTextField();
    private final JBTextField robotVariables = new JBTextField();
    private final JBTextField robotLoadVariablesFromArgumentsFile = new JBTextField();
    private final JBTextField robotPythonpath = new JBTextField();
    private final JBTextField robotLibrariesLibdocNeedsArgs = new JBTextField();
    private final JBTextField robotLibrariesLibdocPreGenerate = new JBTextField();
    private final JBTextField robotLibrariesBlacklist = new JBTextField();
    private final JBTextField robotLibrariesDeprecated = new JBTextField();
    private final JBTextField robotCodeFormatter = new JBTextField();
    private final JBTextField robotFlowExplorerTheme = new JBTextField();
    private final JBTextField robotLintRobocopEnabled = new JBTextField();
    private final JBTextField robotLintEnabled = new JBTextField();
    private final JBTextField robotLintUndefinedKeywords = new JBTextField();
    private final JBTextField robotLintUndefinedLibraries = new JBTextField();
    private final JBTextField robotLintUndefinedResources = new JBTextField();
    private final JBTextField robotLintUndefinedVariableImports = new JBTextField();
    private final JBTextField robotLintKeywordCallArguments = new JBTextField();
    private final JBTextField robotLintKeywordResolvesToMultipleKeywords = new JBTextField();
    private final JBTextField robotLintVariables = new JBTextField();
    private final JBTextField robotLintIgnoreVariables = new JBTextField();
    private final JBTextField robotLintIgnoreEnvironmentVariables = new JBTextField();
    private final JBTextField robotLintUnusedKeyword = new JBTextField();
    private final JBTextField robotCompletionsSectionHeadersForm = new JBTextField();
    private final JBTextField robotCompletionsKeywordsNotImportedEnable = new JBTextField();
    private final JBTextField robotCompletionsKeywordsNotImportedAddImport = new JBTextField();
    private final JBTextField robotCompletionsKeywordsFormat = new JBTextField();
    private final JBTextField robotCompletionsKeywordsPrefixImportName = new JBTextField();
    private final JBTextField robotCompletionsKeywordsPrefixImportNameIgnore = new JBTextField();
    private final JBTextField robotCompletionsKeywordsArgumentsSeparator = new JBTextField();
    private final JBTextField robotWorkspaceSymbolsOnlyForOpenDocs = new JBTextField();
    private final JBTextField robotQuickFixKeywordTemplate = new JBTextField();
    private final JBTextField robotLanguage = new JBTextField();
    private final JBTextField robotTimeoutUse = new JBTextField();
    private final JBTextField robotTimeoutGeneral = new JBTextField();
    private final JBTextField robotTimeoutCompletions = new JBTextField();
    private final JBTextField robotTimeoutCodeFormatting = new JBTextField();
    private final JBTextField robotTimeoutCollectDocsTimeout = new JBTextField();
    private final JBTextField robotTimeoutListTestsTimeout = new JBTextField();

    public RobotPreferencesComponent() {
        panel = FormBuilder.createFormBuilder()
                .addLabeledComponent(new JBLabel("Language Server Python"), robotLanguageServerPython, 1, false)
                .addComponent(createJTextArea("Path to the python executable used to start the Robot Framework Language Server\n(the default is searching python on the PATH).\n"))
                .addLabeledComponent(new JBLabel("Language Server Args"), robotLanguageServerArgs, 1, false)
                .addComponent(createJTextArea("Arguments to be passed to the Robot Framework Language Server\n(i.e.: [\"-vv\", \"--log-file=~/robotframework_ls.log\"]).\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Language Server Tcp Port"), robotLanguageServerTcpPort, 1, false)
                .addComponent(createJTextArea("If the port is specified, connect to the language server previously started at the given port.\n"))
                .addLabeledComponent(new JBLabel("Python Executable"), robotPythonExecutable, 1, false)
                .addComponent(createJTextArea("Secondary python executable used to load user code and dependent libraries\n(the default is using the same python used for the language server).\n"))
                .addLabeledComponent(new JBLabel("Python Env"), robotPythonEnv, 1, false)
                .addComponent(createJTextArea("Environment variables used to load user code and dependent libraries.\n(i.e.: {\"MY_ENV_VAR\": \"some_value\"})\nNote: expected format: JSON Object\n"))
                .addLabeledComponent(new JBLabel("Variables"), robotVariables, 1, false)
                .addComponent(createJTextArea("Custom variables passed to RobotFramework\n(used when resolving variables and automatically passed to the launch config as --variable entries).\n(i.e.: {\"EXECDIR\": \"c:/my/proj/src\"})\nNote: expected format: JSON Object\n"))
                .addLabeledComponent(new JBLabel("Load Variables From Arguments File"), robotLoadVariablesFromArgumentsFile, 1, false)
                .addComponent(createJTextArea("Load variables for code-completion and code-analysis based on an arguments file. Multiple files\naccepted by separating with a comma.\n"))
                .addLabeledComponent(new JBLabel("Pythonpath"), robotPythonpath, 1, false)
                .addComponent(createJTextArea("Entries to be added to the PYTHONPATH\n(used when resolving resources and imports and automatically passed to the launch config as\n--pythonpath entries).\n(i.e.: [\"c:/my/pro/src\"])\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Libraries Libdoc Needs Args"), robotLibrariesLibdocNeedsArgs, 1, false)
                .addComponent(createJTextArea("Libraries which will generate a different set of keywords based on the arguments provided.\n(i.e.: [\"remote\", \"fakerlib\"])\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Libraries Libdoc Pre Generate"), robotLibrariesLibdocPreGenerate, 1, false)
                .addComponent(createJTextArea("List of libraries which should have the libspec pre-generated.\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Libraries Blacklist"), robotLibrariesBlacklist, 1, false)
                .addComponent(createJTextArea("List of libraries which should be blacklisted and not shown for code-completion.\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Libraries Deprecated"), robotLibrariesDeprecated, 1, false)
                .addComponent(createJTextArea("List of libraries which should be deprecated and not shown for auto-import code-completion.\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Code Formatter"), robotCodeFormatter, 1, false)
                .addComponent(createJTextArea("Allows the configuration of the code-formatter engine to be used. One of: robotidy, builtinTidy.\n"))
                .addLabeledComponent(new JBLabel("Flow Explorer Theme"), robotFlowExplorerTheme, 1, false)
                .addComponent(createJTextArea("Allows the configuration of the Robot Flow Explorer theme to be used. One of: dark, light.\n"))
                .addLabeledComponent(new JBLabel("Lint Robocop Enabled"), robotLintRobocopEnabled, 1, false)
                .addComponent(createJTextArea("Specifies whether to lint with Robocop.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Enabled"), robotLintEnabled, 1, false)
                .addComponent(createJTextArea("Determines whether linting should be enabled.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Undefined Keywords"), robotLintUndefinedKeywords, 1, false)
                .addComponent(createJTextArea("Reports undefined keywords when linting.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Undefined Libraries"), robotLintUndefinedLibraries, 1, false)
                .addComponent(createJTextArea("Reports undefined libraries when linting.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Undefined Resources"), robotLintUndefinedResources, 1, false)
                .addComponent(createJTextArea("Reports undefined resources when linting.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Undefined Variable Imports"), robotLintUndefinedVariableImports, 1, false)
                .addComponent(createJTextArea("Reports undefined variable imports when linting.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Keyword Call Arguments"), robotLintKeywordCallArguments, 1, false)
                .addComponent(createJTextArea("Reports issues in keyword call arguments.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Keyword Resolves To Multiple Keywords"), robotLintKeywordResolvesToMultipleKeywords, 1, false)
                .addComponent(createJTextArea("Reports whenever a keyword call would resolve to more than one keyword.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Variables"), robotLintVariables, 1, false)
                .addComponent(createJTextArea("Reports issues in undefined variables.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Lint Ignore Variables"), robotLintIgnoreVariables, 1, false)
                .addComponent(createJTextArea("Don't report undefined variables for these variables\n(i.e.: [\"Var1\", \"Var2\"]).\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Lint Ignore Environment Variables"), robotLintIgnoreEnvironmentVariables, 1, false)
                .addComponent(createJTextArea("Don't report undefined environment variables for these variables\n(i.e.: [\"VAR1\", \"VAR2\"]).\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Lint Unused Keyword"), robotLintUnusedKeyword, 1, false)
                .addComponent(createJTextArea("Reports whether a keyword is not used anywhere in the workspace.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Completions Section Headers Form"), robotCompletionsSectionHeadersForm, 1, false)
                .addComponent(createJTextArea("Defines how completions should be shown for section headers\n(i.e.: *** Setting(s) ***). One of: plural, singular, both.\n"))
                .addLabeledComponent(new JBLabel("Completions Keywords Not Imported Enable"), robotCompletionsKeywordsNotImportedEnable, 1, false)
                .addComponent(createJTextArea("Defines whether to show completions for keywords not currently imported\n(adds the proper import statement when applied).\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Completions Keywords Not Imported Add Import"), robotCompletionsKeywordsNotImportedAddImport, 1, false)
                .addComponent(createJTextArea("Defines whether to actually add the import statement when applying completions showing keywords not\ncurrently imported.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Completions Keywords Format"), robotCompletionsKeywordsFormat, 1, false)
                .addComponent(createJTextArea("Defines how keyword completions should be applied.\nOne of: First upper, Title Case, ALL UPPER, all lower.\n"))
                .addLabeledComponent(new JBLabel("Completions Keywords Prefix Import Name"), robotCompletionsKeywordsPrefixImportName, 1, false)
                .addComponent(createJTextArea("Defines whether completions showing keywords should prefix completions with the module name.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Completions Keywords Prefix Import Name Ignore"), robotCompletionsKeywordsPrefixImportNameIgnore, 1, false)
                .addComponent(createJTextArea("Defines module names for which the name should not be prefixed when applying a completion\n(i.e.: [\"builtin\"]).\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Completions Keywords Arguments Separator"), robotCompletionsKeywordsArgumentsSeparator, 1, false)
                .addComponent(createJTextArea("Defines the string used to separate arguments when applying a Keyword completion with arguments.\n"))
                .addLabeledComponent(new JBLabel("Workspace Symbols Only For Open Docs"), robotWorkspaceSymbolsOnlyForOpenDocs, 1, false)
                .addComponent(createJTextArea("Collecting workspace symbols can be resource intensive on big projects and may slow down code-\ncompletion, in this case, it's possible collect info only for open files on big projects.\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Quick Fix Keyword Template"), robotQuickFixKeywordTemplate, 1, false)
                .addComponent(createJTextArea("The template to be used for keyword creation in quick fixes.\n"))
                .addLabeledComponent(new JBLabel("Language"), robotLanguage, 1, false)
                .addComponent(createJTextArea("Language(s) to be used in Robot Framework\n(passed as the --language argument for robot when launching).\nNote: expected format: JSON Array\n"))
                .addLabeledComponent(new JBLabel("Timeout Use"), robotTimeoutUse, 1, false)
                .addComponent(createJTextArea("Determines whether timeouts should be used or not in the language server\n(consider disabling timeouts on really slow machines).\nNote: expected 'true' or 'false'\n"))
                .addLabeledComponent(new JBLabel("Timeout General"), robotTimeoutGeneral, 1, false)
                .addComponent(createJTextArea("This is the timeout used for most requests in the language server. Set to 0 to disable it.\n"))
                .addLabeledComponent(new JBLabel("Timeout Completions"), robotTimeoutCompletions, 1, false)
                .addComponent(createJTextArea("This is the timeout used for code completion requests. Set to 0 to disable it.\n"))
                .addLabeledComponent(new JBLabel("Timeout Code Formatting"), robotTimeoutCodeFormatting, 1, false)
                .addComponent(createJTextArea("This is the timeout used for code formatting requests. Set to 0 to disable it.\n"))
                .addLabeledComponent(new JBLabel("Timeout Collect Docs Timeout"), robotTimeoutCollectDocsTimeout, 1, false)
                .addComponent(createJTextArea("This is the timeout used for collecting documentation to show in the ROBOT DOCUMENTATION view. Set\nto 0 to disable it.\n"))
                .addLabeledComponent(new JBLabel("Timeout List Tests Timeout"), robotTimeoutListTestsTimeout, 1, false)
                .addComponent(createJTextArea("This is the timeout used for listing the tests from a robot file. Set to 0 to disable it.\n"))
                
                .addComponentFillVertically(new JPanel(), 0)
                .getPanel();
    }

    private JBTextArea createJTextArea(String text) {
        JBTextArea f = new JBTextArea();
        f.setText(text);
        f.setEditable(false);
        f.setBackground(null);
        f.setBorder(null);
        f.setFont(UIManager.getFont("Label.font"));
        return f;
    }

    public JPanel getPanel() {
        return panel;
    }

    public JComponent getPreferredFocusedComponent() {
        return robotLanguageServerPython;
    }

    
    @NotNull
    public String getRobotLanguageServerPython() {
        return robotLanguageServerPython.getText();
    }

    public void setRobotLanguageServerPython (@NotNull String newText) {
        robotLanguageServerPython.setText(newText);
    }
    
    @NotNull
    public String getRobotLanguageServerArgs() {
        return robotLanguageServerArgs.getText();
    }

    public void setRobotLanguageServerArgs (@NotNull String newText) {
        robotLanguageServerArgs.setText(newText);
    }
    
    @NotNull
    public String getRobotLanguageServerTcpPort() {
        return robotLanguageServerTcpPort.getText();
    }

    public void setRobotLanguageServerTcpPort (@NotNull String newText) {
        robotLanguageServerTcpPort.setText(newText);
    }
    
    @NotNull
    public String getRobotPythonExecutable() {
        return robotPythonExecutable.getText();
    }

    public void setRobotPythonExecutable (@NotNull String newText) {
        robotPythonExecutable.setText(newText);
    }
    
    @NotNull
    public String getRobotPythonEnv() {
        return robotPythonEnv.getText();
    }

    public void setRobotPythonEnv (@NotNull String newText) {
        robotPythonEnv.setText(newText);
    }
    
    @NotNull
    public String getRobotVariables() {
        return robotVariables.getText();
    }

    public void setRobotVariables (@NotNull String newText) {
        robotVariables.setText(newText);
    }
    
    @NotNull
    public String getRobotLoadVariablesFromArgumentsFile() {
        return robotLoadVariablesFromArgumentsFile.getText();
    }

    public void setRobotLoadVariablesFromArgumentsFile (@NotNull String newText) {
        robotLoadVariablesFromArgumentsFile.setText(newText);
    }
    
    @NotNull
    public String getRobotPythonpath() {
        return robotPythonpath.getText();
    }

    public void setRobotPythonpath (@NotNull String newText) {
        robotPythonpath.setText(newText);
    }
    
    @NotNull
    public String getRobotLibrariesLibdocNeedsArgs() {
        return robotLibrariesLibdocNeedsArgs.getText();
    }

    public void setRobotLibrariesLibdocNeedsArgs (@NotNull String newText) {
        robotLibrariesLibdocNeedsArgs.setText(newText);
    }
    
    @NotNull
    public String getRobotLibrariesLibdocPreGenerate() {
        return robotLibrariesLibdocPreGenerate.getText();
    }

    public void setRobotLibrariesLibdocPreGenerate (@NotNull String newText) {
        robotLibrariesLibdocPreGenerate.setText(newText);
    }
    
    @NotNull
    public String getRobotLibrariesBlacklist() {
        return robotLibrariesBlacklist.getText();
    }

    public void setRobotLibrariesBlacklist (@NotNull String newText) {
        robotLibrariesBlacklist.setText(newText);
    }
    
    @NotNull
    public String getRobotLibrariesDeprecated() {
        return robotLibrariesDeprecated.getText();
    }

    public void setRobotLibrariesDeprecated (@NotNull String newText) {
        robotLibrariesDeprecated.setText(newText);
    }
    
    @NotNull
    public String getRobotCodeFormatter() {
        return robotCodeFormatter.getText();
    }

    public void setRobotCodeFormatter (@NotNull String newText) {
        robotCodeFormatter.setText(newText);
    }
    
    @NotNull
    public String getRobotFlowExplorerTheme() {
        return robotFlowExplorerTheme.getText();
    }

    public void setRobotFlowExplorerTheme (@NotNull String newText) {
        robotFlowExplorerTheme.setText(newText);
    }
    
    @NotNull
    public String getRobotLintRobocopEnabled() {
        return robotLintRobocopEnabled.getText();
    }

    public void setRobotLintRobocopEnabled (@NotNull String newText) {
        robotLintRobocopEnabled.setText(newText);
    }
    
    @NotNull
    public String getRobotLintEnabled() {
        return robotLintEnabled.getText();
    }

    public void setRobotLintEnabled (@NotNull String newText) {
        robotLintEnabled.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUndefinedKeywords() {
        return robotLintUndefinedKeywords.getText();
    }

    public void setRobotLintUndefinedKeywords (@NotNull String newText) {
        robotLintUndefinedKeywords.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUndefinedLibraries() {
        return robotLintUndefinedLibraries.getText();
    }

    public void setRobotLintUndefinedLibraries (@NotNull String newText) {
        robotLintUndefinedLibraries.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUndefinedResources() {
        return robotLintUndefinedResources.getText();
    }

    public void setRobotLintUndefinedResources (@NotNull String newText) {
        robotLintUndefinedResources.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUndefinedVariableImports() {
        return robotLintUndefinedVariableImports.getText();
    }

    public void setRobotLintUndefinedVariableImports (@NotNull String newText) {
        robotLintUndefinedVariableImports.setText(newText);
    }
    
    @NotNull
    public String getRobotLintKeywordCallArguments() {
        return robotLintKeywordCallArguments.getText();
    }

    public void setRobotLintKeywordCallArguments (@NotNull String newText) {
        robotLintKeywordCallArguments.setText(newText);
    }
    
    @NotNull
    public String getRobotLintKeywordResolvesToMultipleKeywords() {
        return robotLintKeywordResolvesToMultipleKeywords.getText();
    }

    public void setRobotLintKeywordResolvesToMultipleKeywords (@NotNull String newText) {
        robotLintKeywordResolvesToMultipleKeywords.setText(newText);
    }
    
    @NotNull
    public String getRobotLintVariables() {
        return robotLintVariables.getText();
    }

    public void setRobotLintVariables (@NotNull String newText) {
        robotLintVariables.setText(newText);
    }
    
    @NotNull
    public String getRobotLintIgnoreVariables() {
        return robotLintIgnoreVariables.getText();
    }

    public void setRobotLintIgnoreVariables (@NotNull String newText) {
        robotLintIgnoreVariables.setText(newText);
    }
    
    @NotNull
    public String getRobotLintIgnoreEnvironmentVariables() {
        return robotLintIgnoreEnvironmentVariables.getText();
    }

    public void setRobotLintIgnoreEnvironmentVariables (@NotNull String newText) {
        robotLintIgnoreEnvironmentVariables.setText(newText);
    }
    
    @NotNull
    public String getRobotLintUnusedKeyword() {
        return robotLintUnusedKeyword.getText();
    }

    public void setRobotLintUnusedKeyword (@NotNull String newText) {
        robotLintUnusedKeyword.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsSectionHeadersForm() {
        return robotCompletionsSectionHeadersForm.getText();
    }

    public void setRobotCompletionsSectionHeadersForm (@NotNull String newText) {
        robotCompletionsSectionHeadersForm.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsKeywordsNotImportedEnable() {
        return robotCompletionsKeywordsNotImportedEnable.getText();
    }

    public void setRobotCompletionsKeywordsNotImportedEnable (@NotNull String newText) {
        robotCompletionsKeywordsNotImportedEnable.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsKeywordsNotImportedAddImport() {
        return robotCompletionsKeywordsNotImportedAddImport.getText();
    }

    public void setRobotCompletionsKeywordsNotImportedAddImport (@NotNull String newText) {
        robotCompletionsKeywordsNotImportedAddImport.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsKeywordsFormat() {
        return robotCompletionsKeywordsFormat.getText();
    }

    public void setRobotCompletionsKeywordsFormat (@NotNull String newText) {
        robotCompletionsKeywordsFormat.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsKeywordsPrefixImportName() {
        return robotCompletionsKeywordsPrefixImportName.getText();
    }

    public void setRobotCompletionsKeywordsPrefixImportName (@NotNull String newText) {
        robotCompletionsKeywordsPrefixImportName.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsKeywordsPrefixImportNameIgnore() {
        return robotCompletionsKeywordsPrefixImportNameIgnore.getText();
    }

    public void setRobotCompletionsKeywordsPrefixImportNameIgnore (@NotNull String newText) {
        robotCompletionsKeywordsPrefixImportNameIgnore.setText(newText);
    }
    
    @NotNull
    public String getRobotCompletionsKeywordsArgumentsSeparator() {
        return robotCompletionsKeywordsArgumentsSeparator.getText();
    }

    public void setRobotCompletionsKeywordsArgumentsSeparator (@NotNull String newText) {
        robotCompletionsKeywordsArgumentsSeparator.setText(newText);
    }
    
    @NotNull
    public String getRobotWorkspaceSymbolsOnlyForOpenDocs() {
        return robotWorkspaceSymbolsOnlyForOpenDocs.getText();
    }

    public void setRobotWorkspaceSymbolsOnlyForOpenDocs (@NotNull String newText) {
        robotWorkspaceSymbolsOnlyForOpenDocs.setText(newText);
    }
    
    @NotNull
    public String getRobotQuickFixKeywordTemplate() {
        return robotQuickFixKeywordTemplate.getText();
    }

    public void setRobotQuickFixKeywordTemplate (@NotNull String newText) {
        robotQuickFixKeywordTemplate.setText(newText);
    }
    
    @NotNull
    public String getRobotLanguage() {
        return robotLanguage.getText();
    }

    public void setRobotLanguage (@NotNull String newText) {
        robotLanguage.setText(newText);
    }
    
    @NotNull
    public String getRobotTimeoutUse() {
        return robotTimeoutUse.getText();
    }

    public void setRobotTimeoutUse (@NotNull String newText) {
        robotTimeoutUse.setText(newText);
    }
    
    @NotNull
    public String getRobotTimeoutGeneral() {
        return robotTimeoutGeneral.getText();
    }

    public void setRobotTimeoutGeneral (@NotNull String newText) {
        robotTimeoutGeneral.setText(newText);
    }
    
    @NotNull
    public String getRobotTimeoutCompletions() {
        return robotTimeoutCompletions.getText();
    }

    public void setRobotTimeoutCompletions (@NotNull String newText) {
        robotTimeoutCompletions.setText(newText);
    }
    
    @NotNull
    public String getRobotTimeoutCodeFormatting() {
        return robotTimeoutCodeFormatting.getText();
    }

    public void setRobotTimeoutCodeFormatting (@NotNull String newText) {
        robotTimeoutCodeFormatting.setText(newText);
    }
    
    @NotNull
    public String getRobotTimeoutCollectDocsTimeout() {
        return robotTimeoutCollectDocsTimeout.getText();
    }

    public void setRobotTimeoutCollectDocsTimeout (@NotNull String newText) {
        robotTimeoutCollectDocsTimeout.setText(newText);
    }
    
    @NotNull
    public String getRobotTimeoutListTestsTimeout() {
        return robotTimeoutListTestsTimeout.getText();
    }

    public void setRobotTimeoutListTestsTimeout (@NotNull String newText) {
        robotTimeoutListTestsTimeout.setText(newText);
    }
    

}

// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
public class RobotPreferencesPage implements Configurable {
    
    private RobotPreferencesComponent component;

    @Override
    public @NlsContexts.ConfigurableName String getDisplayName() {
        return "Robot Framework (Global)";
    }

    @Override
    public JComponent getPreferredFocusedComponent() {
        return component.getPreferredFocusedComponent();
    }

    @Override
    public @Nullable JComponent createComponent() {
        component = new RobotPreferencesComponent();
        return component.getPanel();
    }

    @Override
    public boolean isModified() {
        RobotPreferences settings = null;
        try {
            settings = RobotPreferences.getInstance();
        } catch (CancelledException e) {
            return false;
        }
        
        if(!settings.getRobotLanguageServerPython().equals(component.getRobotLanguageServerPython())){
            return true;
        }
        
        if(!settings.getRobotLanguageServerArgs().equals(component.getRobotLanguageServerArgs())){
            return true;
        }
        
        if(!settings.getRobotLanguageServerTcpPort().equals(component.getRobotLanguageServerTcpPort())){
            return true;
        }
        
        if(!settings.getRobotPythonExecutable().equals(component.getRobotPythonExecutable())){
            return true;
        }
        
        if(!settings.getRobotPythonEnv().equals(component.getRobotPythonEnv())){
            return true;
        }
        
        if(!settings.getRobotVariables().equals(component.getRobotVariables())){
            return true;
        }
        
        if(!settings.getRobotLoadVariablesFromArgumentsFile().equals(component.getRobotLoadVariablesFromArgumentsFile())){
            return true;
        }
        
        if(!settings.getRobotPythonpath().equals(component.getRobotPythonpath())){
            return true;
        }
        
        if(!settings.getRobotLibrariesLibdocNeedsArgs().equals(component.getRobotLibrariesLibdocNeedsArgs())){
            return true;
        }
        
        if(!settings.getRobotLibrariesLibdocPreGenerate().equals(component.getRobotLibrariesLibdocPreGenerate())){
            return true;
        }
        
        if(!settings.getRobotLibrariesBlacklist().equals(component.getRobotLibrariesBlacklist())){
            return true;
        }
        
        if(!settings.getRobotLibrariesDeprecated().equals(component.getRobotLibrariesDeprecated())){
            return true;
        }
        
        if(!settings.getRobotCodeFormatter().equals(component.getRobotCodeFormatter())){
            return true;
        }
        
        if(!settings.getRobotFlowExplorerTheme().equals(component.getRobotFlowExplorerTheme())){
            return true;
        }
        
        if(!settings.getRobotLintRobocopEnabled().equals(component.getRobotLintRobocopEnabled())){
            return true;
        }
        
        if(!settings.getRobotLintEnabled().equals(component.getRobotLintEnabled())){
            return true;
        }
        
        if(!settings.getRobotLintUndefinedKeywords().equals(component.getRobotLintUndefinedKeywords())){
            return true;
        }
        
        if(!settings.getRobotLintUndefinedLibraries().equals(component.getRobotLintUndefinedLibraries())){
            return true;
        }
        
        if(!settings.getRobotLintUndefinedResources().equals(component.getRobotLintUndefinedResources())){
            return true;
        }
        
        if(!settings.getRobotLintUndefinedVariableImports().equals(component.getRobotLintUndefinedVariableImports())){
            return true;
        }
        
        if(!settings.getRobotLintKeywordCallArguments().equals(component.getRobotLintKeywordCallArguments())){
            return true;
        }
        
        if(!settings.getRobotLintKeywordResolvesToMultipleKeywords().equals(component.getRobotLintKeywordResolvesToMultipleKeywords())){
            return true;
        }
        
        if(!settings.getRobotLintVariables().equals(component.getRobotLintVariables())){
            return true;
        }
        
        if(!settings.getRobotLintIgnoreVariables().equals(component.getRobotLintIgnoreVariables())){
            return true;
        }
        
        if(!settings.getRobotLintIgnoreEnvironmentVariables().equals(component.getRobotLintIgnoreEnvironmentVariables())){
            return true;
        }
        
        if(!settings.getRobotLintUnusedKeyword().equals(component.getRobotLintUnusedKeyword())){
            return true;
        }
        
        if(!settings.getRobotCompletionsSectionHeadersForm().equals(component.getRobotCompletionsSectionHeadersForm())){
            return true;
        }
        
        if(!settings.getRobotCompletionsKeywordsNotImportedEnable().equals(component.getRobotCompletionsKeywordsNotImportedEnable())){
            return true;
        }
        
        if(!settings.getRobotCompletionsKeywordsNotImportedAddImport().equals(component.getRobotCompletionsKeywordsNotImportedAddImport())){
            return true;
        }
        
        if(!settings.getRobotCompletionsKeywordsFormat().equals(component.getRobotCompletionsKeywordsFormat())){
            return true;
        }
        
        if(!settings.getRobotCompletionsKeywordsPrefixImportName().equals(component.getRobotCompletionsKeywordsPrefixImportName())){
            return true;
        }
        
        if(!settings.getRobotCompletionsKeywordsPrefixImportNameIgnore().equals(component.getRobotCompletionsKeywordsPrefixImportNameIgnore())){
            return true;
        }
        
        if(!settings.getRobotCompletionsKeywordsArgumentsSeparator().equals(component.getRobotCompletionsKeywordsArgumentsSeparator())){
            return true;
        }
        
        if(!settings.getRobotWorkspaceSymbolsOnlyForOpenDocs().equals(component.getRobotWorkspaceSymbolsOnlyForOpenDocs())){
            return true;
        }
        
        if(!settings.getRobotQuickFixKeywordTemplate().equals(component.getRobotQuickFixKeywordTemplate())){
            return true;
        }
        
        if(!settings.getRobotLanguage().equals(component.getRobotLanguage())){
            return true;
        }
        
        if(!settings.getRobotTimeoutUse().equals(component.getRobotTimeoutUse())){
            return true;
        }
        
        if(!settings.getRobotTimeoutGeneral().equals(component.getRobotTimeoutGeneral())){
            return true;
        }
        
        if(!settings.getRobotTimeoutCompletions().equals(component.getRobotTimeoutCompletions())){
            return true;
        }
        
        if(!settings.getRobotTimeoutCodeFormatting().equals(component.getRobotTimeoutCodeFormatting())){
            return true;
        }
        
        if(!settings.getRobotTimeoutCollectDocsTimeout().equals(component.getRobotTimeoutCollectDocsTimeout())){
            return true;
        }
        
        if(!settings.getRobotTimeoutListTestsTimeout().equals(component.getRobotTimeoutListTestsTimeout())){
            return true;
        }
        
        return false;
    }

    @Override
    public void reset() {
        RobotPreferences settings = null;
        try {
            settings = RobotPreferences.getInstance();
        } catch (CancelledException e) {
            return;
        }
        
        component.setRobotLanguageServerPython(settings.getRobotLanguageServerPython());
        component.setRobotLanguageServerArgs(settings.getRobotLanguageServerArgs());
        component.setRobotLanguageServerTcpPort(settings.getRobotLanguageServerTcpPort());
        component.setRobotPythonExecutable(settings.getRobotPythonExecutable());
        component.setRobotPythonEnv(settings.getRobotPythonEnv());
        component.setRobotVariables(settings.getRobotVariables());
        component.setRobotLoadVariablesFromArgumentsFile(settings.getRobotLoadVariablesFromArgumentsFile());
        component.setRobotPythonpath(settings.getRobotPythonpath());
        component.setRobotLibrariesLibdocNeedsArgs(settings.getRobotLibrariesLibdocNeedsArgs());
        component.setRobotLibrariesLibdocPreGenerate(settings.getRobotLibrariesLibdocPreGenerate());
        component.setRobotLibrariesBlacklist(settings.getRobotLibrariesBlacklist());
        component.setRobotLibrariesDeprecated(settings.getRobotLibrariesDeprecated());
        component.setRobotCodeFormatter(settings.getRobotCodeFormatter());
        component.setRobotFlowExplorerTheme(settings.getRobotFlowExplorerTheme());
        component.setRobotLintRobocopEnabled(settings.getRobotLintRobocopEnabled());
        component.setRobotLintEnabled(settings.getRobotLintEnabled());
        component.setRobotLintUndefinedKeywords(settings.getRobotLintUndefinedKeywords());
        component.setRobotLintUndefinedLibraries(settings.getRobotLintUndefinedLibraries());
        component.setRobotLintUndefinedResources(settings.getRobotLintUndefinedResources());
        component.setRobotLintUndefinedVariableImports(settings.getRobotLintUndefinedVariableImports());
        component.setRobotLintKeywordCallArguments(settings.getRobotLintKeywordCallArguments());
        component.setRobotLintKeywordResolvesToMultipleKeywords(settings.getRobotLintKeywordResolvesToMultipleKeywords());
        component.setRobotLintVariables(settings.getRobotLintVariables());
        component.setRobotLintIgnoreVariables(settings.getRobotLintIgnoreVariables());
        component.setRobotLintIgnoreEnvironmentVariables(settings.getRobotLintIgnoreEnvironmentVariables());
        component.setRobotLintUnusedKeyword(settings.getRobotLintUnusedKeyword());
        component.setRobotCompletionsSectionHeadersForm(settings.getRobotCompletionsSectionHeadersForm());
        component.setRobotCompletionsKeywordsNotImportedEnable(settings.getRobotCompletionsKeywordsNotImportedEnable());
        component.setRobotCompletionsKeywordsNotImportedAddImport(settings.getRobotCompletionsKeywordsNotImportedAddImport());
        component.setRobotCompletionsKeywordsFormat(settings.getRobotCompletionsKeywordsFormat());
        component.setRobotCompletionsKeywordsPrefixImportName(settings.getRobotCompletionsKeywordsPrefixImportName());
        component.setRobotCompletionsKeywordsPrefixImportNameIgnore(settings.getRobotCompletionsKeywordsPrefixImportNameIgnore());
        component.setRobotCompletionsKeywordsArgumentsSeparator(settings.getRobotCompletionsKeywordsArgumentsSeparator());
        component.setRobotWorkspaceSymbolsOnlyForOpenDocs(settings.getRobotWorkspaceSymbolsOnlyForOpenDocs());
        component.setRobotQuickFixKeywordTemplate(settings.getRobotQuickFixKeywordTemplate());
        component.setRobotLanguage(settings.getRobotLanguage());
        component.setRobotTimeoutUse(settings.getRobotTimeoutUse());
        component.setRobotTimeoutGeneral(settings.getRobotTimeoutGeneral());
        component.setRobotTimeoutCompletions(settings.getRobotTimeoutCompletions());
        component.setRobotTimeoutCodeFormatting(settings.getRobotTimeoutCodeFormatting());
        component.setRobotTimeoutCollectDocsTimeout(settings.getRobotTimeoutCollectDocsTimeout());
        component.setRobotTimeoutListTestsTimeout(settings.getRobotTimeoutListTestsTimeout());
    }

    @Override
    public void apply() throws ConfigurationException {
        RobotPreferences settings = null;
        try {
            settings = RobotPreferences.getInstance();
        } catch (CancelledException e) {
            return;
        }
        String s;
        
        s = settings.validateRobotLanguageServerPython(component.getRobotLanguageServerPython());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Language Server Python:\n" + s);
        }
        s = settings.validateRobotLanguageServerArgs(component.getRobotLanguageServerArgs());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Language Server Args:\n" + s);
        }
        s = settings.validateRobotLanguageServerTcpPort(component.getRobotLanguageServerTcpPort());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Language Server Tcp Port:\n" + s);
        }
        s = settings.validateRobotPythonExecutable(component.getRobotPythonExecutable());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Python Executable:\n" + s);
        }
        s = settings.validateRobotPythonEnv(component.getRobotPythonEnv());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Python Env:\n" + s);
        }
        s = settings.validateRobotVariables(component.getRobotVariables());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Variables:\n" + s);
        }
        s = settings.validateRobotLoadVariablesFromArgumentsFile(component.getRobotLoadVariablesFromArgumentsFile());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Load Variables From Arguments File:\n" + s);
        }
        s = settings.validateRobotPythonpath(component.getRobotPythonpath());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Pythonpath:\n" + s);
        }
        s = settings.validateRobotLibrariesLibdocNeedsArgs(component.getRobotLibrariesLibdocNeedsArgs());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Libraries Libdoc Needs Args:\n" + s);
        }
        s = settings.validateRobotLibrariesLibdocPreGenerate(component.getRobotLibrariesLibdocPreGenerate());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Libraries Libdoc Pre Generate:\n" + s);
        }
        s = settings.validateRobotLibrariesBlacklist(component.getRobotLibrariesBlacklist());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Libraries Blacklist:\n" + s);
        }
        s = settings.validateRobotLibrariesDeprecated(component.getRobotLibrariesDeprecated());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Libraries Deprecated:\n" + s);
        }
        s = settings.validateRobotCodeFormatter(component.getRobotCodeFormatter());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Code Formatter:\n" + s);
        }
        s = settings.validateRobotFlowExplorerTheme(component.getRobotFlowExplorerTheme());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Flow Explorer Theme:\n" + s);
        }
        s = settings.validateRobotLintRobocopEnabled(component.getRobotLintRobocopEnabled());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Robocop Enabled:\n" + s);
        }
        s = settings.validateRobotLintEnabled(component.getRobotLintEnabled());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Enabled:\n" + s);
        }
        s = settings.validateRobotLintUndefinedKeywords(component.getRobotLintUndefinedKeywords());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Undefined Keywords:\n" + s);
        }
        s = settings.validateRobotLintUndefinedLibraries(component.getRobotLintUndefinedLibraries());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Undefined Libraries:\n" + s);
        }
        s = settings.validateRobotLintUndefinedResources(component.getRobotLintUndefinedResources());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Undefined Resources:\n" + s);
        }
        s = settings.validateRobotLintUndefinedVariableImports(component.getRobotLintUndefinedVariableImports());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Undefined Variable Imports:\n" + s);
        }
        s = settings.validateRobotLintKeywordCallArguments(component.getRobotLintKeywordCallArguments());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Keyword Call Arguments:\n" + s);
        }
        s = settings.validateRobotLintKeywordResolvesToMultipleKeywords(component.getRobotLintKeywordResolvesToMultipleKeywords());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Keyword Resolves To Multiple Keywords:\n" + s);
        }
        s = settings.validateRobotLintVariables(component.getRobotLintVariables());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Variables:\n" + s);
        }
        s = settings.validateRobotLintIgnoreVariables(component.getRobotLintIgnoreVariables());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Ignore Variables:\n" + s);
        }
        s = settings.validateRobotLintIgnoreEnvironmentVariables(component.getRobotLintIgnoreEnvironmentVariables());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Ignore Environment Variables:\n" + s);
        }
        s = settings.validateRobotLintUnusedKeyword(component.getRobotLintUnusedKeyword());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Lint Unused Keyword:\n" + s);
        }
        s = settings.validateRobotCompletionsSectionHeadersForm(component.getRobotCompletionsSectionHeadersForm());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Section Headers Form:\n" + s);
        }
        s = settings.validateRobotCompletionsKeywordsNotImportedEnable(component.getRobotCompletionsKeywordsNotImportedEnable());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Keywords Not Imported Enable:\n" + s);
        }
        s = settings.validateRobotCompletionsKeywordsNotImportedAddImport(component.getRobotCompletionsKeywordsNotImportedAddImport());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Keywords Not Imported Add Import:\n" + s);
        }
        s = settings.validateRobotCompletionsKeywordsFormat(component.getRobotCompletionsKeywordsFormat());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Keywords Format:\n" + s);
        }
        s = settings.validateRobotCompletionsKeywordsPrefixImportName(component.getRobotCompletionsKeywordsPrefixImportName());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Keywords Prefix Import Name:\n" + s);
        }
        s = settings.validateRobotCompletionsKeywordsPrefixImportNameIgnore(component.getRobotCompletionsKeywordsPrefixImportNameIgnore());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Keywords Prefix Import Name Ignore:\n" + s);
        }
        s = settings.validateRobotCompletionsKeywordsArgumentsSeparator(component.getRobotCompletionsKeywordsArgumentsSeparator());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Completions Keywords Arguments Separator:\n" + s);
        }
        s = settings.validateRobotWorkspaceSymbolsOnlyForOpenDocs(component.getRobotWorkspaceSymbolsOnlyForOpenDocs());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Workspace Symbols Only For Open Docs:\n" + s);
        }
        s = settings.validateRobotQuickFixKeywordTemplate(component.getRobotQuickFixKeywordTemplate());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Quick Fix Keyword Template:\n" + s);
        }
        s = settings.validateRobotLanguage(component.getRobotLanguage());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Language:\n" + s);
        }
        s = settings.validateRobotTimeoutUse(component.getRobotTimeoutUse());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Timeout Use:\n" + s);
        }
        s = settings.validateRobotTimeoutGeneral(component.getRobotTimeoutGeneral());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Timeout General:\n" + s);
        }
        s = settings.validateRobotTimeoutCompletions(component.getRobotTimeoutCompletions());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Timeout Completions:\n" + s);
        }
        s = settings.validateRobotTimeoutCodeFormatting(component.getRobotTimeoutCodeFormatting());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Timeout Code Formatting:\n" + s);
        }
        s = settings.validateRobotTimeoutCollectDocsTimeout(component.getRobotTimeoutCollectDocsTimeout());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Timeout Collect Docs Timeout:\n" + s);
        }
        s = settings.validateRobotTimeoutListTestsTimeout(component.getRobotTimeoutListTestsTimeout());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in Timeout List Tests Timeout:\n" + s);
        }
        
        settings.setRobotLanguageServerPython(component.getRobotLanguageServerPython());
        settings.setRobotLanguageServerArgs(component.getRobotLanguageServerArgs());
        settings.setRobotLanguageServerTcpPort(component.getRobotLanguageServerTcpPort());
        settings.setRobotPythonExecutable(component.getRobotPythonExecutable());
        settings.setRobotPythonEnv(component.getRobotPythonEnv());
        settings.setRobotVariables(component.getRobotVariables());
        settings.setRobotLoadVariablesFromArgumentsFile(component.getRobotLoadVariablesFromArgumentsFile());
        settings.setRobotPythonpath(component.getRobotPythonpath());
        settings.setRobotLibrariesLibdocNeedsArgs(component.getRobotLibrariesLibdocNeedsArgs());
        settings.setRobotLibrariesLibdocPreGenerate(component.getRobotLibrariesLibdocPreGenerate());
        settings.setRobotLibrariesBlacklist(component.getRobotLibrariesBlacklist());
        settings.setRobotLibrariesDeprecated(component.getRobotLibrariesDeprecated());
        settings.setRobotCodeFormatter(component.getRobotCodeFormatter());
        settings.setRobotFlowExplorerTheme(component.getRobotFlowExplorerTheme());
        settings.setRobotLintRobocopEnabled(component.getRobotLintRobocopEnabled());
        settings.setRobotLintEnabled(component.getRobotLintEnabled());
        settings.setRobotLintUndefinedKeywords(component.getRobotLintUndefinedKeywords());
        settings.setRobotLintUndefinedLibraries(component.getRobotLintUndefinedLibraries());
        settings.setRobotLintUndefinedResources(component.getRobotLintUndefinedResources());
        settings.setRobotLintUndefinedVariableImports(component.getRobotLintUndefinedVariableImports());
        settings.setRobotLintKeywordCallArguments(component.getRobotLintKeywordCallArguments());
        settings.setRobotLintKeywordResolvesToMultipleKeywords(component.getRobotLintKeywordResolvesToMultipleKeywords());
        settings.setRobotLintVariables(component.getRobotLintVariables());
        settings.setRobotLintIgnoreVariables(component.getRobotLintIgnoreVariables());
        settings.setRobotLintIgnoreEnvironmentVariables(component.getRobotLintIgnoreEnvironmentVariables());
        settings.setRobotLintUnusedKeyword(component.getRobotLintUnusedKeyword());
        settings.setRobotCompletionsSectionHeadersForm(component.getRobotCompletionsSectionHeadersForm());
        settings.setRobotCompletionsKeywordsNotImportedEnable(component.getRobotCompletionsKeywordsNotImportedEnable());
        settings.setRobotCompletionsKeywordsNotImportedAddImport(component.getRobotCompletionsKeywordsNotImportedAddImport());
        settings.setRobotCompletionsKeywordsFormat(component.getRobotCompletionsKeywordsFormat());
        settings.setRobotCompletionsKeywordsPrefixImportName(component.getRobotCompletionsKeywordsPrefixImportName());
        settings.setRobotCompletionsKeywordsPrefixImportNameIgnore(component.getRobotCompletionsKeywordsPrefixImportNameIgnore());
        settings.setRobotCompletionsKeywordsArgumentsSeparator(component.getRobotCompletionsKeywordsArgumentsSeparator());
        settings.setRobotWorkspaceSymbolsOnlyForOpenDocs(component.getRobotWorkspaceSymbolsOnlyForOpenDocs());
        settings.setRobotQuickFixKeywordTemplate(component.getRobotQuickFixKeywordTemplate());
        settings.setRobotLanguage(component.getRobotLanguage());
        settings.setRobotTimeoutUse(component.getRobotTimeoutUse());
        settings.setRobotTimeoutGeneral(component.getRobotTimeoutGeneral());
        settings.setRobotTimeoutCompletions(component.getRobotTimeoutCompletions());
        settings.setRobotTimeoutCodeFormatting(component.getRobotTimeoutCodeFormatting());
        settings.setRobotTimeoutCollectDocsTimeout(component.getRobotTimeoutCollectDocsTimeout());
        settings.setRobotTimeoutListTestsTimeout(component.getRobotTimeoutListTestsTimeout());
    }
}