package robocorp.robot.intellij;

import com.google.gson.*;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.progress.ProcessCanceledException;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import robocorp.lsp.intellij.LanguageServerDefinition;

import java.util.Collection;
import java.util.concurrent.CopyOnWriteArraySet;


class RobotState {
    
    public String robotLanguageServerPython = "";
    public String robotLanguageServerArgs = "";
    public String robotLanguageServerTcpPort = "";
    public String robotPythonExecutable = "";
    public String robotPythonEnv = "";
    public String robotVariables = "";
    public String robotLoadVariablesFromArgumentsFile = "";
    public String robotPythonpath = "";
    public String robotCodeFormatter = "";
    public String robotFlowExplorerTheme = "";
    public String robotWorkspaceSymbolsOnlyForOpenDocs = "";
    public String robotQuickFixKeywordTemplate = "";
    public String robotLanguage = "";
    public String robotTestViewEnabled = "";
    public String robotLibrariesLibdocNeedsArgs = "";
    public String robotLibrariesLibdocPreGenerate = "";
    public String robotLibrariesBlacklist = "";
    public String robotLibrariesDeprecated = "";
    public String robotLintRobocopEnabled = "";
    public String robotLintEnabled = "";
    public String robotLintUndefinedKeywords = "";
    public String robotLintUndefinedLibraries = "";
    public String robotLintUndefinedResources = "";
    public String robotLintUndefinedVariableImports = "";
    public String robotLintKeywordCallArguments = "";
    public String robotLintKeywordResolvesToMultipleKeywords = "";
    public String robotLintVariables = "";
    public String robotLintIgnoreVariables = "";
    public String robotLintIgnoreEnvironmentVariables = "";
    public String robotLintUnusedKeyword = "";
    public String robotCompletionsSectionHeadersForm = "";
    public String robotCompletionsKeywordsNotImportedEnable = "";
    public String robotCompletionsKeywordsNotImportedAddImport = "";
    public String robotCompletionsKeywordsFormat = "";
    public String robotCompletionsKeywordsPrefixImportName = "";
    public String robotCompletionsKeywordsPrefixImportNameIgnore = "";
    public String robotCompletionsKeywordsArgumentsSeparator = "";
    public String robotTimeoutUse = "";
    public String robotTimeoutGeneral = "";
    public String robotTimeoutCompletions = "";
    public String robotTimeoutCodeFormatting = "";
    public String robotTimeoutCollectDocsTimeout = "";
    public String robotTimeoutListTestsTimeout = "";
}

// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
@State(name = "RobotPreferences", storages = {@Storage("RobotPreferences.xml")})
public class RobotPreferences implements PersistentStateComponent<RobotState> {

    
    public static final String ROBOT_LANGUAGE_SERVER_PYTHON = "robot.language-server.python";
    public static final String ROBOT_LANGUAGE_SERVER_ARGS = "robot.language-server.args";
    public static final String ROBOT_LANGUAGE_SERVER_TCP_PORT = "robot.language-server.tcp-port";
    public static final String ROBOT_PYTHON_EXECUTABLE = "robot.python.executable";
    public static final String ROBOT_PYTHON_ENV = "robot.python.env";
    public static final String ROBOT_VARIABLES = "robot.variables";
    public static final String ROBOT_LOAD_VARIABLES_FROM_ARGUMENTS_FILE = "robot.loadVariablesFromArgumentsFile";
    public static final String ROBOT_PYTHONPATH = "robot.pythonpath";
    public static final String ROBOT_CODE_FORMATTER = "robot.codeFormatter";
    public static final String ROBOT_FLOW_EXPLORER_THEME = "robot.flowExplorerTheme";
    public static final String ROBOT_WORKSPACE_SYMBOLS_ONLY_FOR_OPEN_DOCS = "robot.workspaceSymbolsOnlyForOpenDocs";
    public static final String ROBOT_QUICK_FIX_KEYWORD_TEMPLATE = "robot.quickFix.keywordTemplate";
    public static final String ROBOT_LANGUAGE = "robot.language";
    public static final String ROBOT_TEST_VIEW_ENABLED = "robot.testView.enabled";
    public static final String ROBOT_LIBRARIES_LIBDOC_NEEDS_ARGS = "robot.libraries.libdoc.needsArgs";
    public static final String ROBOT_LIBRARIES_LIBDOC_PRE_GENERATE = "robot.libraries.libdoc.preGenerate";
    public static final String ROBOT_LIBRARIES_BLACKLIST = "robot.libraries.blacklist";
    public static final String ROBOT_LIBRARIES_DEPRECATED = "robot.libraries.deprecated";
    public static final String ROBOT_LINT_ROBOCOP_ENABLED = "robot.lint.robocop.enabled";
    public static final String ROBOT_LINT_ENABLED = "robot.lint.enabled";
    public static final String ROBOT_LINT_UNDEFINED_KEYWORDS = "robot.lint.undefinedKeywords";
    public static final String ROBOT_LINT_UNDEFINED_LIBRARIES = "robot.lint.undefinedLibraries";
    public static final String ROBOT_LINT_UNDEFINED_RESOURCES = "robot.lint.undefinedResources";
    public static final String ROBOT_LINT_UNDEFINED_VARIABLE_IMPORTS = "robot.lint.undefinedVariableImports";
    public static final String ROBOT_LINT_KEYWORD_CALL_ARGUMENTS = "robot.lint.keywordCallArguments";
    public static final String ROBOT_LINT_KEYWORD_RESOLVES_TO_MULTIPLE_KEYWORDS = "robot.lint.keywordResolvesToMultipleKeywords";
    public static final String ROBOT_LINT_VARIABLES = "robot.lint.variables";
    public static final String ROBOT_LINT_IGNORE_VARIABLES = "robot.lint.ignoreVariables";
    public static final String ROBOT_LINT_IGNORE_ENVIRONMENT_VARIABLES = "robot.lint.ignoreEnvironmentVariables";
    public static final String ROBOT_LINT_UNUSED_KEYWORD = "robot.lint.unusedKeyword";
    public static final String ROBOT_COMPLETIONS_SECTION_HEADERS_FORM = "robot.completions.section_headers.form";
    public static final String ROBOT_COMPLETIONS_KEYWORDS_NOT_IMPORTED_ENABLE = "robot.completions.keywordsNotImported.enable";
    public static final String ROBOT_COMPLETIONS_KEYWORDS_NOT_IMPORTED_ADD_IMPORT = "robot.completions.keywordsNotImported.addImport";
    public static final String ROBOT_COMPLETIONS_KEYWORDS_FORMAT = "robot.completions.keywords.format";
    public static final String ROBOT_COMPLETIONS_KEYWORDS_PREFIX_IMPORT_NAME = "robot.completions.keywords.prefixImportName";
    public static final String ROBOT_COMPLETIONS_KEYWORDS_PREFIX_IMPORT_NAME_IGNORE = "robot.completions.keywords.prefixImportNameIgnore";
    public static final String ROBOT_COMPLETIONS_KEYWORDS_ARGUMENTS_SEPARATOR = "robot.completions.keywords.argumentsSeparator";
    public static final String ROBOT_TIMEOUT_USE = "robot.timeout.use";
    public static final String ROBOT_TIMEOUT_GENERAL = "robot.timeout.general";
    public static final String ROBOT_TIMEOUT_COMPLETIONS = "robot.timeout.completions";
    public static final String ROBOT_TIMEOUT_CODE_FORMATTING = "robot.timeout.codeFormatting";
    public static final String ROBOT_TIMEOUT_COLLECT_DOCS_TIMEOUT = "robot.timeout.collectDocsTimeout";
    public static final String ROBOT_TIMEOUT_LIST_TESTS_TIMEOUT = "robot.timeout.listTestsTimeout";

    private static final Logger LOG = Logger.getInstance(RobotPreferences.class);

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    @Nullable
    @Override
    public RobotState getState() {
        RobotState robotState = new RobotState();
        
        robotState.robotLanguageServerPython = getRobotLanguageServerPython();
        robotState.robotLanguageServerArgs = getRobotLanguageServerArgs();
        robotState.robotLanguageServerTcpPort = getRobotLanguageServerTcpPort();
        robotState.robotPythonExecutable = getRobotPythonExecutable();
        robotState.robotPythonEnv = getRobotPythonEnv();
        robotState.robotVariables = getRobotVariables();
        robotState.robotLoadVariablesFromArgumentsFile = getRobotLoadVariablesFromArgumentsFile();
        robotState.robotPythonpath = getRobotPythonpath();
        robotState.robotCodeFormatter = getRobotCodeFormatter();
        robotState.robotFlowExplorerTheme = getRobotFlowExplorerTheme();
        robotState.robotWorkspaceSymbolsOnlyForOpenDocs = getRobotWorkspaceSymbolsOnlyForOpenDocs();
        robotState.robotQuickFixKeywordTemplate = getRobotQuickFixKeywordTemplate();
        robotState.robotLanguage = getRobotLanguage();
        robotState.robotTestViewEnabled = getRobotTestViewEnabled();
        robotState.robotLibrariesLibdocNeedsArgs = getRobotLibrariesLibdocNeedsArgs();
        robotState.robotLibrariesLibdocPreGenerate = getRobotLibrariesLibdocPreGenerate();
        robotState.robotLibrariesBlacklist = getRobotLibrariesBlacklist();
        robotState.robotLibrariesDeprecated = getRobotLibrariesDeprecated();
        robotState.robotLintRobocopEnabled = getRobotLintRobocopEnabled();
        robotState.robotLintEnabled = getRobotLintEnabled();
        robotState.robotLintUndefinedKeywords = getRobotLintUndefinedKeywords();
        robotState.robotLintUndefinedLibraries = getRobotLintUndefinedLibraries();
        robotState.robotLintUndefinedResources = getRobotLintUndefinedResources();
        robotState.robotLintUndefinedVariableImports = getRobotLintUndefinedVariableImports();
        robotState.robotLintKeywordCallArguments = getRobotLintKeywordCallArguments();
        robotState.robotLintKeywordResolvesToMultipleKeywords = getRobotLintKeywordResolvesToMultipleKeywords();
        robotState.robotLintVariables = getRobotLintVariables();
        robotState.robotLintIgnoreVariables = getRobotLintIgnoreVariables();
        robotState.robotLintIgnoreEnvironmentVariables = getRobotLintIgnoreEnvironmentVariables();
        robotState.robotLintUnusedKeyword = getRobotLintUnusedKeyword();
        robotState.robotCompletionsSectionHeadersForm = getRobotCompletionsSectionHeadersForm();
        robotState.robotCompletionsKeywordsNotImportedEnable = getRobotCompletionsKeywordsNotImportedEnable();
        robotState.robotCompletionsKeywordsNotImportedAddImport = getRobotCompletionsKeywordsNotImportedAddImport();
        robotState.robotCompletionsKeywordsFormat = getRobotCompletionsKeywordsFormat();
        robotState.robotCompletionsKeywordsPrefixImportName = getRobotCompletionsKeywordsPrefixImportName();
        robotState.robotCompletionsKeywordsPrefixImportNameIgnore = getRobotCompletionsKeywordsPrefixImportNameIgnore();
        robotState.robotCompletionsKeywordsArgumentsSeparator = getRobotCompletionsKeywordsArgumentsSeparator();
        robotState.robotTimeoutUse = getRobotTimeoutUse();
        robotState.robotTimeoutGeneral = getRobotTimeoutGeneral();
        robotState.robotTimeoutCompletions = getRobotTimeoutCompletions();
        robotState.robotTimeoutCodeFormatting = getRobotTimeoutCodeFormatting();
        robotState.robotTimeoutCollectDocsTimeout = getRobotTimeoutCollectDocsTimeout();
        robotState.robotTimeoutListTestsTimeout = getRobotTimeoutListTestsTimeout();
        return robotState;
    }

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    @Override
    public void loadState(@NotNull RobotState robotState) {
        
        setRobotLanguageServerPython(robotState.robotLanguageServerPython);
        setRobotLanguageServerArgs(robotState.robotLanguageServerArgs);
        setRobotLanguageServerTcpPort(robotState.robotLanguageServerTcpPort);
        setRobotPythonExecutable(robotState.robotPythonExecutable);
        setRobotPythonEnv(robotState.robotPythonEnv);
        setRobotVariables(robotState.robotVariables);
        setRobotLoadVariablesFromArgumentsFile(robotState.robotLoadVariablesFromArgumentsFile);
        setRobotPythonpath(robotState.robotPythonpath);
        setRobotCodeFormatter(robotState.robotCodeFormatter);
        setRobotFlowExplorerTheme(robotState.robotFlowExplorerTheme);
        setRobotWorkspaceSymbolsOnlyForOpenDocs(robotState.robotWorkspaceSymbolsOnlyForOpenDocs);
        setRobotQuickFixKeywordTemplate(robotState.robotQuickFixKeywordTemplate);
        setRobotLanguage(robotState.robotLanguage);
        setRobotTestViewEnabled(robotState.robotTestViewEnabled);
        setRobotLibrariesLibdocNeedsArgs(robotState.robotLibrariesLibdocNeedsArgs);
        setRobotLibrariesLibdocPreGenerate(robotState.robotLibrariesLibdocPreGenerate);
        setRobotLibrariesBlacklist(robotState.robotLibrariesBlacklist);
        setRobotLibrariesDeprecated(robotState.robotLibrariesDeprecated);
        setRobotLintRobocopEnabled(robotState.robotLintRobocopEnabled);
        setRobotLintEnabled(robotState.robotLintEnabled);
        setRobotLintUndefinedKeywords(robotState.robotLintUndefinedKeywords);
        setRobotLintUndefinedLibraries(robotState.robotLintUndefinedLibraries);
        setRobotLintUndefinedResources(robotState.robotLintUndefinedResources);
        setRobotLintUndefinedVariableImports(robotState.robotLintUndefinedVariableImports);
        setRobotLintKeywordCallArguments(robotState.robotLintKeywordCallArguments);
        setRobotLintKeywordResolvesToMultipleKeywords(robotState.robotLintKeywordResolvesToMultipleKeywords);
        setRobotLintVariables(robotState.robotLintVariables);
        setRobotLintIgnoreVariables(robotState.robotLintIgnoreVariables);
        setRobotLintIgnoreEnvironmentVariables(robotState.robotLintIgnoreEnvironmentVariables);
        setRobotLintUnusedKeyword(robotState.robotLintUnusedKeyword);
        setRobotCompletionsSectionHeadersForm(robotState.robotCompletionsSectionHeadersForm);
        setRobotCompletionsKeywordsNotImportedEnable(robotState.robotCompletionsKeywordsNotImportedEnable);
        setRobotCompletionsKeywordsNotImportedAddImport(robotState.robotCompletionsKeywordsNotImportedAddImport);
        setRobotCompletionsKeywordsFormat(robotState.robotCompletionsKeywordsFormat);
        setRobotCompletionsKeywordsPrefixImportName(robotState.robotCompletionsKeywordsPrefixImportName);
        setRobotCompletionsKeywordsPrefixImportNameIgnore(robotState.robotCompletionsKeywordsPrefixImportNameIgnore);
        setRobotCompletionsKeywordsArgumentsSeparator(robotState.robotCompletionsKeywordsArgumentsSeparator);
        setRobotTimeoutUse(robotState.robotTimeoutUse);
        setRobotTimeoutGeneral(robotState.robotTimeoutGeneral);
        setRobotTimeoutCompletions(robotState.robotTimeoutCompletions);
        setRobotTimeoutCodeFormatting(robotState.robotTimeoutCodeFormatting);
        setRobotTimeoutCollectDocsTimeout(robotState.robotTimeoutCollectDocsTimeout);
        setRobotTimeoutListTestsTimeout(robotState.robotTimeoutListTestsTimeout);
    }

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    public JsonObject asJsonObject() {
        JsonObject jsonObject = new JsonObject();
        
        if(!robotLanguageServerPython.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LANGUAGE_SERVER_PYTHON, new JsonPrimitive(robotLanguageServerPython));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLanguageServerArgs.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LANGUAGE_SERVER_ARGS, g.fromJson(robotLanguageServerArgs, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLanguageServerTcpPort.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LANGUAGE_SERVER_TCP_PORT, new JsonPrimitive(Integer.parseInt(robotLanguageServerTcpPort)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotPythonExecutable.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_PYTHON_EXECUTABLE, new JsonPrimitive(robotPythonExecutable));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotPythonEnv.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_PYTHON_ENV, g.fromJson(robotPythonEnv, JsonObject.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotVariables.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_VARIABLES, g.fromJson(robotVariables, JsonObject.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLoadVariablesFromArgumentsFile.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LOAD_VARIABLES_FROM_ARGUMENTS_FILE, new JsonPrimitive(robotLoadVariablesFromArgumentsFile));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotPythonpath.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_PYTHONPATH, g.fromJson(robotPythonpath, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCodeFormatter.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_CODE_FORMATTER, new JsonPrimitive(robotCodeFormatter));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotFlowExplorerTheme.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_FLOW_EXPLORER_THEME, new JsonPrimitive(robotFlowExplorerTheme));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotWorkspaceSymbolsOnlyForOpenDocs.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_WORKSPACE_SYMBOLS_ONLY_FOR_OPEN_DOCS, new JsonPrimitive(Boolean.parseBoolean(robotWorkspaceSymbolsOnlyForOpenDocs)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotQuickFixKeywordTemplate.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_QUICK_FIX_KEYWORD_TEMPLATE, new JsonPrimitive(robotQuickFixKeywordTemplate));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLanguage.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LANGUAGE, g.fromJson(robotLanguage, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotTestViewEnabled.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_TEST_VIEW_ENABLED, new JsonPrimitive(Boolean.parseBoolean(robotTestViewEnabled)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLibrariesLibdocNeedsArgs.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LIBRARIES_LIBDOC_NEEDS_ARGS, g.fromJson(robotLibrariesLibdocNeedsArgs, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLibrariesLibdocPreGenerate.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LIBRARIES_LIBDOC_PRE_GENERATE, g.fromJson(robotLibrariesLibdocPreGenerate, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLibrariesBlacklist.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LIBRARIES_BLACKLIST, g.fromJson(robotLibrariesBlacklist, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLibrariesDeprecated.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LIBRARIES_DEPRECATED, g.fromJson(robotLibrariesDeprecated, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintRobocopEnabled.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_ROBOCOP_ENABLED, new JsonPrimitive(Boolean.parseBoolean(robotLintRobocopEnabled)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintEnabled.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_ENABLED, new JsonPrimitive(Boolean.parseBoolean(robotLintEnabled)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintUndefinedKeywords.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_UNDEFINED_KEYWORDS, new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedKeywords)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintUndefinedLibraries.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_UNDEFINED_LIBRARIES, new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedLibraries)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintUndefinedResources.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_UNDEFINED_RESOURCES, new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedResources)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintUndefinedVariableImports.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_UNDEFINED_VARIABLE_IMPORTS, new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedVariableImports)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintKeywordCallArguments.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_KEYWORD_CALL_ARGUMENTS, new JsonPrimitive(Boolean.parseBoolean(robotLintKeywordCallArguments)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintKeywordResolvesToMultipleKeywords.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_KEYWORD_RESOLVES_TO_MULTIPLE_KEYWORDS, new JsonPrimitive(Boolean.parseBoolean(robotLintKeywordResolvesToMultipleKeywords)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintVariables.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_VARIABLES, new JsonPrimitive(Boolean.parseBoolean(robotLintVariables)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintIgnoreVariables.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LINT_IGNORE_VARIABLES, g.fromJson(robotLintIgnoreVariables, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintIgnoreEnvironmentVariables.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_LINT_IGNORE_ENVIRONMENT_VARIABLES, g.fromJson(robotLintIgnoreEnvironmentVariables, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLintUnusedKeyword.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_LINT_UNUSED_KEYWORD, new JsonPrimitive(Boolean.parseBoolean(robotLintUnusedKeyword)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsSectionHeadersForm.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_COMPLETIONS_SECTION_HEADERS_FORM, new JsonPrimitive(robotCompletionsSectionHeadersForm));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsKeywordsNotImportedEnable.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_COMPLETIONS_KEYWORDS_NOT_IMPORTED_ENABLE, new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsNotImportedEnable)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsKeywordsNotImportedAddImport.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_COMPLETIONS_KEYWORDS_NOT_IMPORTED_ADD_IMPORT, new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsNotImportedAddImport)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsKeywordsFormat.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_COMPLETIONS_KEYWORDS_FORMAT, new JsonPrimitive(robotCompletionsKeywordsFormat));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsKeywordsPrefixImportName.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_COMPLETIONS_KEYWORDS_PREFIX_IMPORT_NAME, new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsPrefixImportName)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsKeywordsPrefixImportNameIgnore.isEmpty()){
            Gson g = new Gson();
            try {
                jsonObject.add(ROBOT_COMPLETIONS_KEYWORDS_PREFIX_IMPORT_NAME_IGNORE, g.fromJson(robotCompletionsKeywordsPrefixImportNameIgnore, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsKeywordsArgumentsSeparator.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_COMPLETIONS_KEYWORDS_ARGUMENTS_SEPARATOR, new JsonPrimitive(robotCompletionsKeywordsArgumentsSeparator));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotTimeoutUse.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_TIMEOUT_USE, new JsonPrimitive(Boolean.parseBoolean(robotTimeoutUse)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotTimeoutGeneral.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_TIMEOUT_GENERAL, new JsonPrimitive(Integer.parseInt(robotTimeoutGeneral)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotTimeoutCompletions.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_TIMEOUT_COMPLETIONS, new JsonPrimitive(Integer.parseInt(robotTimeoutCompletions)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotTimeoutCodeFormatting.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_TIMEOUT_CODE_FORMATTING, new JsonPrimitive(Integer.parseInt(robotTimeoutCodeFormatting)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotTimeoutCollectDocsTimeout.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_TIMEOUT_COLLECT_DOCS_TIMEOUT, new JsonPrimitive(Integer.parseInt(robotTimeoutCollectDocsTimeout)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotTimeoutListTestsTimeout.isEmpty()){
            
            try {
                jsonObject.add(ROBOT_TIMEOUT_LIST_TESTS_TIMEOUT, new JsonPrimitive(Integer.parseInt(robotTimeoutListTestsTimeout)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        return jsonObject;
    }

    
    private String robotLanguageServerPython = "";

    public @NotNull String getRobotLanguageServerPython() {
        return robotLanguageServerPython;
    }

    public @Nullable JsonPrimitive getRobotLanguageServerPythonAsJson() {
        if(robotLanguageServerPython.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotLanguageServerPython);
    }

    public @NotNull String validateRobotLanguageServerPython(String robotLanguageServerPython) {
        if(robotLanguageServerPython.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotLanguageServerPython);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLanguageServerPython(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLanguageServerPython)) {
            return;
        }
        String old = robotLanguageServerPython;
        robotLanguageServerPython = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LANGUAGE_SERVER_PYTHON, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLanguageServerArgs = "";

    public @NotNull String getRobotLanguageServerArgs() {
        return robotLanguageServerArgs;
    }

    public @Nullable JsonArray getRobotLanguageServerArgsAsJson() {
        if(robotLanguageServerArgs.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLanguageServerArgs, JsonArray.class);
    }

    public @NotNull String validateRobotLanguageServerArgs(String robotLanguageServerArgs) {
        if(robotLanguageServerArgs.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLanguageServerArgs, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLanguageServerArgs(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLanguageServerArgs)) {
            return;
        }
        String old = robotLanguageServerArgs;
        robotLanguageServerArgs = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LANGUAGE_SERVER_ARGS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLanguageServerTcpPort = "";

    public @NotNull String getRobotLanguageServerTcpPort() {
        return robotLanguageServerTcpPort;
    }

    public @Nullable JsonPrimitive getRobotLanguageServerTcpPortAsJson() {
        if(robotLanguageServerTcpPort.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Integer.parseInt(robotLanguageServerTcpPort));
    }

    public @NotNull String validateRobotLanguageServerTcpPort(String robotLanguageServerTcpPort) {
        if(robotLanguageServerTcpPort.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Integer.parseInt(robotLanguageServerTcpPort));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLanguageServerTcpPort(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLanguageServerTcpPort)) {
            return;
        }
        String old = robotLanguageServerTcpPort;
        robotLanguageServerTcpPort = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LANGUAGE_SERVER_TCP_PORT, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotPythonExecutable = "";

    public @NotNull String getRobotPythonExecutable() {
        return robotPythonExecutable;
    }

    public @Nullable JsonPrimitive getRobotPythonExecutableAsJson() {
        if(robotPythonExecutable.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotPythonExecutable);
    }

    public @NotNull String validateRobotPythonExecutable(String robotPythonExecutable) {
        if(robotPythonExecutable.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotPythonExecutable);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotPythonExecutable(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotPythonExecutable)) {
            return;
        }
        String old = robotPythonExecutable;
        robotPythonExecutable = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_PYTHON_EXECUTABLE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotPythonEnv = "";

    public @NotNull String getRobotPythonEnv() {
        return robotPythonEnv;
    }

    public @Nullable JsonObject getRobotPythonEnvAsJson() {
        if(robotPythonEnv.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotPythonEnv, JsonObject.class);
    }

    public @NotNull String validateRobotPythonEnv(String robotPythonEnv) {
        if(robotPythonEnv.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotPythonEnv, JsonObject.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotPythonEnv(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotPythonEnv)) {
            return;
        }
        String old = robotPythonEnv;
        robotPythonEnv = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_PYTHON_ENV, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotVariables = "";

    public @NotNull String getRobotVariables() {
        return robotVariables;
    }

    public @Nullable JsonObject getRobotVariablesAsJson() {
        if(robotVariables.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotVariables, JsonObject.class);
    }

    public @NotNull String validateRobotVariables(String robotVariables) {
        if(robotVariables.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotVariables, JsonObject.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotVariables(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotVariables)) {
            return;
        }
        String old = robotVariables;
        robotVariables = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_VARIABLES, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLoadVariablesFromArgumentsFile = "";

    public @NotNull String getRobotLoadVariablesFromArgumentsFile() {
        return robotLoadVariablesFromArgumentsFile;
    }

    public @Nullable JsonPrimitive getRobotLoadVariablesFromArgumentsFileAsJson() {
        if(robotLoadVariablesFromArgumentsFile.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotLoadVariablesFromArgumentsFile);
    }

    public @NotNull String validateRobotLoadVariablesFromArgumentsFile(String robotLoadVariablesFromArgumentsFile) {
        if(robotLoadVariablesFromArgumentsFile.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotLoadVariablesFromArgumentsFile);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLoadVariablesFromArgumentsFile(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLoadVariablesFromArgumentsFile)) {
            return;
        }
        String old = robotLoadVariablesFromArgumentsFile;
        robotLoadVariablesFromArgumentsFile = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LOAD_VARIABLES_FROM_ARGUMENTS_FILE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotPythonpath = "";

    public @NotNull String getRobotPythonpath() {
        return robotPythonpath;
    }

    public @Nullable JsonArray getRobotPythonpathAsJson() {
        if(robotPythonpath.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotPythonpath, JsonArray.class);
    }

    public @NotNull String validateRobotPythonpath(String robotPythonpath) {
        if(robotPythonpath.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotPythonpath, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotPythonpath(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotPythonpath)) {
            return;
        }
        String old = robotPythonpath;
        robotPythonpath = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_PYTHONPATH, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCodeFormatter = "";

    public @NotNull String getRobotCodeFormatter() {
        return robotCodeFormatter;
    }

    public @Nullable JsonPrimitive getRobotCodeFormatterAsJson() {
        if(robotCodeFormatter.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotCodeFormatter);
    }

    public @NotNull String validateRobotCodeFormatter(String robotCodeFormatter) {
        if(robotCodeFormatter.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotCodeFormatter);
             
            if(robotCodeFormatter.equalsIgnoreCase("robotidy")){
                return "";
            }
            if(robotCodeFormatter.equalsIgnoreCase("builtinTidy")){
                return "";
            }
            return "Unexpected value: " + robotCodeFormatter;
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCodeFormatter(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCodeFormatter)) {
            return;
        }
        String old = robotCodeFormatter;
        robotCodeFormatter = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_CODE_FORMATTER, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotFlowExplorerTheme = "";

    public @NotNull String getRobotFlowExplorerTheme() {
        return robotFlowExplorerTheme;
    }

    public @Nullable JsonPrimitive getRobotFlowExplorerThemeAsJson() {
        if(robotFlowExplorerTheme.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotFlowExplorerTheme);
    }

    public @NotNull String validateRobotFlowExplorerTheme(String robotFlowExplorerTheme) {
        if(robotFlowExplorerTheme.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotFlowExplorerTheme);
             
            if(robotFlowExplorerTheme.equalsIgnoreCase("dark")){
                return "";
            }
            if(robotFlowExplorerTheme.equalsIgnoreCase("light")){
                return "";
            }
            return "Unexpected value: " + robotFlowExplorerTheme;
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotFlowExplorerTheme(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotFlowExplorerTheme)) {
            return;
        }
        String old = robotFlowExplorerTheme;
        robotFlowExplorerTheme = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_FLOW_EXPLORER_THEME, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotWorkspaceSymbolsOnlyForOpenDocs = "";

    public @NotNull String getRobotWorkspaceSymbolsOnlyForOpenDocs() {
        return robotWorkspaceSymbolsOnlyForOpenDocs;
    }

    public @Nullable JsonPrimitive getRobotWorkspaceSymbolsOnlyForOpenDocsAsJson() {
        if(robotWorkspaceSymbolsOnlyForOpenDocs.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotWorkspaceSymbolsOnlyForOpenDocs));
    }

    public @NotNull String validateRobotWorkspaceSymbolsOnlyForOpenDocs(String robotWorkspaceSymbolsOnlyForOpenDocs) {
        if(robotWorkspaceSymbolsOnlyForOpenDocs.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotWorkspaceSymbolsOnlyForOpenDocs));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotWorkspaceSymbolsOnlyForOpenDocs(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotWorkspaceSymbolsOnlyForOpenDocs)) {
            return;
        }
        String old = robotWorkspaceSymbolsOnlyForOpenDocs;
        robotWorkspaceSymbolsOnlyForOpenDocs = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_WORKSPACE_SYMBOLS_ONLY_FOR_OPEN_DOCS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotQuickFixKeywordTemplate = "";

    public @NotNull String getRobotQuickFixKeywordTemplate() {
        return robotQuickFixKeywordTemplate;
    }

    public @Nullable JsonPrimitive getRobotQuickFixKeywordTemplateAsJson() {
        if(robotQuickFixKeywordTemplate.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotQuickFixKeywordTemplate);
    }

    public @NotNull String validateRobotQuickFixKeywordTemplate(String robotQuickFixKeywordTemplate) {
        if(robotQuickFixKeywordTemplate.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotQuickFixKeywordTemplate);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotQuickFixKeywordTemplate(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotQuickFixKeywordTemplate)) {
            return;
        }
        String old = robotQuickFixKeywordTemplate;
        robotQuickFixKeywordTemplate = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_QUICK_FIX_KEYWORD_TEMPLATE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLanguage = "";

    public @NotNull String getRobotLanguage() {
        return robotLanguage;
    }

    public @Nullable JsonArray getRobotLanguageAsJson() {
        if(robotLanguage.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLanguage, JsonArray.class);
    }

    public @NotNull String validateRobotLanguage(String robotLanguage) {
        if(robotLanguage.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLanguage, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLanguage(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLanguage)) {
            return;
        }
        String old = robotLanguage;
        robotLanguage = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LANGUAGE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotTestViewEnabled = "";

    public @NotNull String getRobotTestViewEnabled() {
        return robotTestViewEnabled;
    }

    public @Nullable JsonPrimitive getRobotTestViewEnabledAsJson() {
        if(robotTestViewEnabled.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotTestViewEnabled));
    }

    public @NotNull String validateRobotTestViewEnabled(String robotTestViewEnabled) {
        if(robotTestViewEnabled.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotTestViewEnabled));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotTestViewEnabled(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotTestViewEnabled)) {
            return;
        }
        String old = robotTestViewEnabled;
        robotTestViewEnabled = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_TEST_VIEW_ENABLED, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLibrariesLibdocNeedsArgs = "";

    public @NotNull String getRobotLibrariesLibdocNeedsArgs() {
        return robotLibrariesLibdocNeedsArgs;
    }

    public @Nullable JsonArray getRobotLibrariesLibdocNeedsArgsAsJson() {
        if(robotLibrariesLibdocNeedsArgs.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLibrariesLibdocNeedsArgs, JsonArray.class);
    }

    public @NotNull String validateRobotLibrariesLibdocNeedsArgs(String robotLibrariesLibdocNeedsArgs) {
        if(robotLibrariesLibdocNeedsArgs.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLibrariesLibdocNeedsArgs, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLibrariesLibdocNeedsArgs(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLibrariesLibdocNeedsArgs)) {
            return;
        }
        String old = robotLibrariesLibdocNeedsArgs;
        robotLibrariesLibdocNeedsArgs = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LIBRARIES_LIBDOC_NEEDS_ARGS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLibrariesLibdocPreGenerate = "";

    public @NotNull String getRobotLibrariesLibdocPreGenerate() {
        return robotLibrariesLibdocPreGenerate;
    }

    public @Nullable JsonArray getRobotLibrariesLibdocPreGenerateAsJson() {
        if(robotLibrariesLibdocPreGenerate.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLibrariesLibdocPreGenerate, JsonArray.class);
    }

    public @NotNull String validateRobotLibrariesLibdocPreGenerate(String robotLibrariesLibdocPreGenerate) {
        if(robotLibrariesLibdocPreGenerate.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLibrariesLibdocPreGenerate, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLibrariesLibdocPreGenerate(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLibrariesLibdocPreGenerate)) {
            return;
        }
        String old = robotLibrariesLibdocPreGenerate;
        robotLibrariesLibdocPreGenerate = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LIBRARIES_LIBDOC_PRE_GENERATE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLibrariesBlacklist = "";

    public @NotNull String getRobotLibrariesBlacklist() {
        return robotLibrariesBlacklist;
    }

    public @Nullable JsonArray getRobotLibrariesBlacklistAsJson() {
        if(robotLibrariesBlacklist.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLibrariesBlacklist, JsonArray.class);
    }

    public @NotNull String validateRobotLibrariesBlacklist(String robotLibrariesBlacklist) {
        if(robotLibrariesBlacklist.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLibrariesBlacklist, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLibrariesBlacklist(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLibrariesBlacklist)) {
            return;
        }
        String old = robotLibrariesBlacklist;
        robotLibrariesBlacklist = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LIBRARIES_BLACKLIST, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLibrariesDeprecated = "";

    public @NotNull String getRobotLibrariesDeprecated() {
        return robotLibrariesDeprecated;
    }

    public @Nullable JsonArray getRobotLibrariesDeprecatedAsJson() {
        if(robotLibrariesDeprecated.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLibrariesDeprecated, JsonArray.class);
    }

    public @NotNull String validateRobotLibrariesDeprecated(String robotLibrariesDeprecated) {
        if(robotLibrariesDeprecated.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLibrariesDeprecated, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLibrariesDeprecated(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLibrariesDeprecated)) {
            return;
        }
        String old = robotLibrariesDeprecated;
        robotLibrariesDeprecated = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LIBRARIES_DEPRECATED, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintRobocopEnabled = "";

    public @NotNull String getRobotLintRobocopEnabled() {
        return robotLintRobocopEnabled;
    }

    public @Nullable JsonPrimitive getRobotLintRobocopEnabledAsJson() {
        if(robotLintRobocopEnabled.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintRobocopEnabled));
    }

    public @NotNull String validateRobotLintRobocopEnabled(String robotLintRobocopEnabled) {
        if(robotLintRobocopEnabled.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintRobocopEnabled));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintRobocopEnabled(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintRobocopEnabled)) {
            return;
        }
        String old = robotLintRobocopEnabled;
        robotLintRobocopEnabled = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_ROBOCOP_ENABLED, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintEnabled = "";

    public @NotNull String getRobotLintEnabled() {
        return robotLintEnabled;
    }

    public @Nullable JsonPrimitive getRobotLintEnabledAsJson() {
        if(robotLintEnabled.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintEnabled));
    }

    public @NotNull String validateRobotLintEnabled(String robotLintEnabled) {
        if(robotLintEnabled.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintEnabled));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintEnabled(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintEnabled)) {
            return;
        }
        String old = robotLintEnabled;
        robotLintEnabled = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_ENABLED, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintUndefinedKeywords = "";

    public @NotNull String getRobotLintUndefinedKeywords() {
        return robotLintUndefinedKeywords;
    }

    public @Nullable JsonPrimitive getRobotLintUndefinedKeywordsAsJson() {
        if(robotLintUndefinedKeywords.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedKeywords));
    }

    public @NotNull String validateRobotLintUndefinedKeywords(String robotLintUndefinedKeywords) {
        if(robotLintUndefinedKeywords.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedKeywords));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintUndefinedKeywords(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintUndefinedKeywords)) {
            return;
        }
        String old = robotLintUndefinedKeywords;
        robotLintUndefinedKeywords = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_UNDEFINED_KEYWORDS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintUndefinedLibraries = "";

    public @NotNull String getRobotLintUndefinedLibraries() {
        return robotLintUndefinedLibraries;
    }

    public @Nullable JsonPrimitive getRobotLintUndefinedLibrariesAsJson() {
        if(robotLintUndefinedLibraries.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedLibraries));
    }

    public @NotNull String validateRobotLintUndefinedLibraries(String robotLintUndefinedLibraries) {
        if(robotLintUndefinedLibraries.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedLibraries));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintUndefinedLibraries(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintUndefinedLibraries)) {
            return;
        }
        String old = robotLintUndefinedLibraries;
        robotLintUndefinedLibraries = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_UNDEFINED_LIBRARIES, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintUndefinedResources = "";

    public @NotNull String getRobotLintUndefinedResources() {
        return robotLintUndefinedResources;
    }

    public @Nullable JsonPrimitive getRobotLintUndefinedResourcesAsJson() {
        if(robotLintUndefinedResources.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedResources));
    }

    public @NotNull String validateRobotLintUndefinedResources(String robotLintUndefinedResources) {
        if(robotLintUndefinedResources.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedResources));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintUndefinedResources(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintUndefinedResources)) {
            return;
        }
        String old = robotLintUndefinedResources;
        robotLintUndefinedResources = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_UNDEFINED_RESOURCES, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintUndefinedVariableImports = "";

    public @NotNull String getRobotLintUndefinedVariableImports() {
        return robotLintUndefinedVariableImports;
    }

    public @Nullable JsonPrimitive getRobotLintUndefinedVariableImportsAsJson() {
        if(robotLintUndefinedVariableImports.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedVariableImports));
    }

    public @NotNull String validateRobotLintUndefinedVariableImports(String robotLintUndefinedVariableImports) {
        if(robotLintUndefinedVariableImports.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintUndefinedVariableImports));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintUndefinedVariableImports(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintUndefinedVariableImports)) {
            return;
        }
        String old = robotLintUndefinedVariableImports;
        robotLintUndefinedVariableImports = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_UNDEFINED_VARIABLE_IMPORTS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintKeywordCallArguments = "";

    public @NotNull String getRobotLintKeywordCallArguments() {
        return robotLintKeywordCallArguments;
    }

    public @Nullable JsonPrimitive getRobotLintKeywordCallArgumentsAsJson() {
        if(robotLintKeywordCallArguments.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintKeywordCallArguments));
    }

    public @NotNull String validateRobotLintKeywordCallArguments(String robotLintKeywordCallArguments) {
        if(robotLintKeywordCallArguments.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintKeywordCallArguments));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintKeywordCallArguments(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintKeywordCallArguments)) {
            return;
        }
        String old = robotLintKeywordCallArguments;
        robotLintKeywordCallArguments = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_KEYWORD_CALL_ARGUMENTS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintKeywordResolvesToMultipleKeywords = "";

    public @NotNull String getRobotLintKeywordResolvesToMultipleKeywords() {
        return robotLintKeywordResolvesToMultipleKeywords;
    }

    public @Nullable JsonPrimitive getRobotLintKeywordResolvesToMultipleKeywordsAsJson() {
        if(robotLintKeywordResolvesToMultipleKeywords.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintKeywordResolvesToMultipleKeywords));
    }

    public @NotNull String validateRobotLintKeywordResolvesToMultipleKeywords(String robotLintKeywordResolvesToMultipleKeywords) {
        if(robotLintKeywordResolvesToMultipleKeywords.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintKeywordResolvesToMultipleKeywords));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintKeywordResolvesToMultipleKeywords(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintKeywordResolvesToMultipleKeywords)) {
            return;
        }
        String old = robotLintKeywordResolvesToMultipleKeywords;
        robotLintKeywordResolvesToMultipleKeywords = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_KEYWORD_RESOLVES_TO_MULTIPLE_KEYWORDS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintVariables = "";

    public @NotNull String getRobotLintVariables() {
        return robotLintVariables;
    }

    public @Nullable JsonPrimitive getRobotLintVariablesAsJson() {
        if(robotLintVariables.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintVariables));
    }

    public @NotNull String validateRobotLintVariables(String robotLintVariables) {
        if(robotLintVariables.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintVariables));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintVariables(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintVariables)) {
            return;
        }
        String old = robotLintVariables;
        robotLintVariables = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_VARIABLES, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintIgnoreVariables = "";

    public @NotNull String getRobotLintIgnoreVariables() {
        return robotLintIgnoreVariables;
    }

    public @Nullable JsonArray getRobotLintIgnoreVariablesAsJson() {
        if(robotLintIgnoreVariables.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLintIgnoreVariables, JsonArray.class);
    }

    public @NotNull String validateRobotLintIgnoreVariables(String robotLintIgnoreVariables) {
        if(robotLintIgnoreVariables.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLintIgnoreVariables, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintIgnoreVariables(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintIgnoreVariables)) {
            return;
        }
        String old = robotLintIgnoreVariables;
        robotLintIgnoreVariables = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_IGNORE_VARIABLES, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintIgnoreEnvironmentVariables = "";

    public @NotNull String getRobotLintIgnoreEnvironmentVariables() {
        return robotLintIgnoreEnvironmentVariables;
    }

    public @Nullable JsonArray getRobotLintIgnoreEnvironmentVariablesAsJson() {
        if(robotLintIgnoreEnvironmentVariables.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotLintIgnoreEnvironmentVariables, JsonArray.class);
    }

    public @NotNull String validateRobotLintIgnoreEnvironmentVariables(String robotLintIgnoreEnvironmentVariables) {
        if(robotLintIgnoreEnvironmentVariables.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotLintIgnoreEnvironmentVariables, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintIgnoreEnvironmentVariables(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintIgnoreEnvironmentVariables)) {
            return;
        }
        String old = robotLintIgnoreEnvironmentVariables;
        robotLintIgnoreEnvironmentVariables = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_IGNORE_ENVIRONMENT_VARIABLES, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotLintUnusedKeyword = "";

    public @NotNull String getRobotLintUnusedKeyword() {
        return robotLintUnusedKeyword;
    }

    public @Nullable JsonPrimitive getRobotLintUnusedKeywordAsJson() {
        if(robotLintUnusedKeyword.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotLintUnusedKeyword));
    }

    public @NotNull String validateRobotLintUnusedKeyword(String robotLintUnusedKeyword) {
        if(robotLintUnusedKeyword.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotLintUnusedKeyword));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotLintUnusedKeyword(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLintUnusedKeyword)) {
            return;
        }
        String old = robotLintUnusedKeyword;
        robotLintUnusedKeyword = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_LINT_UNUSED_KEYWORD, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCompletionsSectionHeadersForm = "";

    public @NotNull String getRobotCompletionsSectionHeadersForm() {
        return robotCompletionsSectionHeadersForm;
    }

    public @Nullable JsonPrimitive getRobotCompletionsSectionHeadersFormAsJson() {
        if(robotCompletionsSectionHeadersForm.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotCompletionsSectionHeadersForm);
    }

    public @NotNull String validateRobotCompletionsSectionHeadersForm(String robotCompletionsSectionHeadersForm) {
        if(robotCompletionsSectionHeadersForm.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotCompletionsSectionHeadersForm);
             
            if(robotCompletionsSectionHeadersForm.equalsIgnoreCase("plural")){
                return "";
            }
            if(robotCompletionsSectionHeadersForm.equalsIgnoreCase("singular")){
                return "";
            }
            if(robotCompletionsSectionHeadersForm.equalsIgnoreCase("both")){
                return "";
            }
            return "Unexpected value: " + robotCompletionsSectionHeadersForm;
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCompletionsSectionHeadersForm(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsSectionHeadersForm)) {
            return;
        }
        String old = robotCompletionsSectionHeadersForm;
        robotCompletionsSectionHeadersForm = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_COMPLETIONS_SECTION_HEADERS_FORM, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCompletionsKeywordsNotImportedEnable = "";

    public @NotNull String getRobotCompletionsKeywordsNotImportedEnable() {
        return robotCompletionsKeywordsNotImportedEnable;
    }

    public @Nullable JsonPrimitive getRobotCompletionsKeywordsNotImportedEnableAsJson() {
        if(robotCompletionsKeywordsNotImportedEnable.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsNotImportedEnable));
    }

    public @NotNull String validateRobotCompletionsKeywordsNotImportedEnable(String robotCompletionsKeywordsNotImportedEnable) {
        if(robotCompletionsKeywordsNotImportedEnable.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsNotImportedEnable));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCompletionsKeywordsNotImportedEnable(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsKeywordsNotImportedEnable)) {
            return;
        }
        String old = robotCompletionsKeywordsNotImportedEnable;
        robotCompletionsKeywordsNotImportedEnable = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_COMPLETIONS_KEYWORDS_NOT_IMPORTED_ENABLE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCompletionsKeywordsNotImportedAddImport = "";

    public @NotNull String getRobotCompletionsKeywordsNotImportedAddImport() {
        return robotCompletionsKeywordsNotImportedAddImport;
    }

    public @Nullable JsonPrimitive getRobotCompletionsKeywordsNotImportedAddImportAsJson() {
        if(robotCompletionsKeywordsNotImportedAddImport.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsNotImportedAddImport));
    }

    public @NotNull String validateRobotCompletionsKeywordsNotImportedAddImport(String robotCompletionsKeywordsNotImportedAddImport) {
        if(robotCompletionsKeywordsNotImportedAddImport.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsNotImportedAddImport));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCompletionsKeywordsNotImportedAddImport(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsKeywordsNotImportedAddImport)) {
            return;
        }
        String old = robotCompletionsKeywordsNotImportedAddImport;
        robotCompletionsKeywordsNotImportedAddImport = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_COMPLETIONS_KEYWORDS_NOT_IMPORTED_ADD_IMPORT, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCompletionsKeywordsFormat = "";

    public @NotNull String getRobotCompletionsKeywordsFormat() {
        return robotCompletionsKeywordsFormat;
    }

    public @Nullable JsonPrimitive getRobotCompletionsKeywordsFormatAsJson() {
        if(robotCompletionsKeywordsFormat.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotCompletionsKeywordsFormat);
    }

    public @NotNull String validateRobotCompletionsKeywordsFormat(String robotCompletionsKeywordsFormat) {
        if(robotCompletionsKeywordsFormat.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotCompletionsKeywordsFormat);
             
            if(robotCompletionsKeywordsFormat.equalsIgnoreCase("First upper")){
                return "";
            }
            if(robotCompletionsKeywordsFormat.equalsIgnoreCase("Title Case")){
                return "";
            }
            if(robotCompletionsKeywordsFormat.equalsIgnoreCase("ALL UPPER")){
                return "";
            }
            if(robotCompletionsKeywordsFormat.equalsIgnoreCase("all lower")){
                return "";
            }
            return "Unexpected value: " + robotCompletionsKeywordsFormat;
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCompletionsKeywordsFormat(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsKeywordsFormat)) {
            return;
        }
        String old = robotCompletionsKeywordsFormat;
        robotCompletionsKeywordsFormat = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_COMPLETIONS_KEYWORDS_FORMAT, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCompletionsKeywordsPrefixImportName = "";

    public @NotNull String getRobotCompletionsKeywordsPrefixImportName() {
        return robotCompletionsKeywordsPrefixImportName;
    }

    public @Nullable JsonPrimitive getRobotCompletionsKeywordsPrefixImportNameAsJson() {
        if(robotCompletionsKeywordsPrefixImportName.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsPrefixImportName));
    }

    public @NotNull String validateRobotCompletionsKeywordsPrefixImportName(String robotCompletionsKeywordsPrefixImportName) {
        if(robotCompletionsKeywordsPrefixImportName.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotCompletionsKeywordsPrefixImportName));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCompletionsKeywordsPrefixImportName(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsKeywordsPrefixImportName)) {
            return;
        }
        String old = robotCompletionsKeywordsPrefixImportName;
        robotCompletionsKeywordsPrefixImportName = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_COMPLETIONS_KEYWORDS_PREFIX_IMPORT_NAME, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCompletionsKeywordsPrefixImportNameIgnore = "";

    public @NotNull String getRobotCompletionsKeywordsPrefixImportNameIgnore() {
        return robotCompletionsKeywordsPrefixImportNameIgnore;
    }

    public @Nullable JsonArray getRobotCompletionsKeywordsPrefixImportNameIgnoreAsJson() {
        if(robotCompletionsKeywordsPrefixImportNameIgnore.isEmpty()){
            return null;
        }
        Gson g = new Gson();
        return g.fromJson(robotCompletionsKeywordsPrefixImportNameIgnore, JsonArray.class);
    }

    public @NotNull String validateRobotCompletionsKeywordsPrefixImportNameIgnore(String robotCompletionsKeywordsPrefixImportNameIgnore) {
        if(robotCompletionsKeywordsPrefixImportNameIgnore.isEmpty()) {
            return "";
        }
        try {
            Gson g = new Gson();
            g.fromJson(robotCompletionsKeywordsPrefixImportNameIgnore, JsonArray.class);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCompletionsKeywordsPrefixImportNameIgnore(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsKeywordsPrefixImportNameIgnore)) {
            return;
        }
        String old = robotCompletionsKeywordsPrefixImportNameIgnore;
        robotCompletionsKeywordsPrefixImportNameIgnore = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_COMPLETIONS_KEYWORDS_PREFIX_IMPORT_NAME_IGNORE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotCompletionsKeywordsArgumentsSeparator = "";

    public @NotNull String getRobotCompletionsKeywordsArgumentsSeparator() {
        return robotCompletionsKeywordsArgumentsSeparator;
    }

    public @Nullable JsonPrimitive getRobotCompletionsKeywordsArgumentsSeparatorAsJson() {
        if(robotCompletionsKeywordsArgumentsSeparator.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(robotCompletionsKeywordsArgumentsSeparator);
    }

    public @NotNull String validateRobotCompletionsKeywordsArgumentsSeparator(String robotCompletionsKeywordsArgumentsSeparator) {
        if(robotCompletionsKeywordsArgumentsSeparator.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(robotCompletionsKeywordsArgumentsSeparator);
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotCompletionsKeywordsArgumentsSeparator(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsKeywordsArgumentsSeparator)) {
            return;
        }
        String old = robotCompletionsKeywordsArgumentsSeparator;
        robotCompletionsKeywordsArgumentsSeparator = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_COMPLETIONS_KEYWORDS_ARGUMENTS_SEPARATOR, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotTimeoutUse = "";

    public @NotNull String getRobotTimeoutUse() {
        return robotTimeoutUse;
    }

    public @Nullable JsonPrimitive getRobotTimeoutUseAsJson() {
        if(robotTimeoutUse.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Boolean.parseBoolean(robotTimeoutUse));
    }

    public @NotNull String validateRobotTimeoutUse(String robotTimeoutUse) {
        if(robotTimeoutUse.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Boolean.parseBoolean(robotTimeoutUse));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotTimeoutUse(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotTimeoutUse)) {
            return;
        }
        String old = robotTimeoutUse;
        robotTimeoutUse = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_TIMEOUT_USE, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotTimeoutGeneral = "";

    public @NotNull String getRobotTimeoutGeneral() {
        return robotTimeoutGeneral;
    }

    public @Nullable JsonPrimitive getRobotTimeoutGeneralAsJson() {
        if(robotTimeoutGeneral.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Integer.parseInt(robotTimeoutGeneral));
    }

    public @NotNull String validateRobotTimeoutGeneral(String robotTimeoutGeneral) {
        if(robotTimeoutGeneral.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Integer.parseInt(robotTimeoutGeneral));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotTimeoutGeneral(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotTimeoutGeneral)) {
            return;
        }
        String old = robotTimeoutGeneral;
        robotTimeoutGeneral = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_TIMEOUT_GENERAL, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotTimeoutCompletions = "";

    public @NotNull String getRobotTimeoutCompletions() {
        return robotTimeoutCompletions;
    }

    public @Nullable JsonPrimitive getRobotTimeoutCompletionsAsJson() {
        if(robotTimeoutCompletions.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Integer.parseInt(robotTimeoutCompletions));
    }

    public @NotNull String validateRobotTimeoutCompletions(String robotTimeoutCompletions) {
        if(robotTimeoutCompletions.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Integer.parseInt(robotTimeoutCompletions));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotTimeoutCompletions(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotTimeoutCompletions)) {
            return;
        }
        String old = robotTimeoutCompletions;
        robotTimeoutCompletions = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_TIMEOUT_COMPLETIONS, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotTimeoutCodeFormatting = "";

    public @NotNull String getRobotTimeoutCodeFormatting() {
        return robotTimeoutCodeFormatting;
    }

    public @Nullable JsonPrimitive getRobotTimeoutCodeFormattingAsJson() {
        if(robotTimeoutCodeFormatting.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Integer.parseInt(robotTimeoutCodeFormatting));
    }

    public @NotNull String validateRobotTimeoutCodeFormatting(String robotTimeoutCodeFormatting) {
        if(robotTimeoutCodeFormatting.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Integer.parseInt(robotTimeoutCodeFormatting));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotTimeoutCodeFormatting(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotTimeoutCodeFormatting)) {
            return;
        }
        String old = robotTimeoutCodeFormatting;
        robotTimeoutCodeFormatting = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_TIMEOUT_CODE_FORMATTING, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotTimeoutCollectDocsTimeout = "";

    public @NotNull String getRobotTimeoutCollectDocsTimeout() {
        return robotTimeoutCollectDocsTimeout;
    }

    public @Nullable JsonPrimitive getRobotTimeoutCollectDocsTimeoutAsJson() {
        if(robotTimeoutCollectDocsTimeout.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Integer.parseInt(robotTimeoutCollectDocsTimeout));
    }

    public @NotNull String validateRobotTimeoutCollectDocsTimeout(String robotTimeoutCollectDocsTimeout) {
        if(robotTimeoutCollectDocsTimeout.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Integer.parseInt(robotTimeoutCollectDocsTimeout));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotTimeoutCollectDocsTimeout(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotTimeoutCollectDocsTimeout)) {
            return;
        }
        String old = robotTimeoutCollectDocsTimeout;
        robotTimeoutCollectDocsTimeout = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_TIMEOUT_COLLECT_DOCS_TIMEOUT, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    
    private String robotTimeoutListTestsTimeout = "";

    public @NotNull String getRobotTimeoutListTestsTimeout() {
        return robotTimeoutListTestsTimeout;
    }

    public @Nullable JsonPrimitive getRobotTimeoutListTestsTimeoutAsJson() {
        if(robotTimeoutListTestsTimeout.isEmpty()){
            return null;
        }
        
        return new JsonPrimitive(Integer.parseInt(robotTimeoutListTestsTimeout));
    }

    public @NotNull String validateRobotTimeoutListTestsTimeout(String robotTimeoutListTestsTimeout) {
        if(robotTimeoutListTestsTimeout.isEmpty()) {
            return "";
        }
        try {
            
            new JsonPrimitive(Integer.parseInt(robotTimeoutListTestsTimeout));
            
            return "";
            
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void setRobotTimeoutListTestsTimeout(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotTimeoutListTestsTimeout)) {
            return;
        }
        String old = robotTimeoutListTestsTimeout;
        robotTimeoutListTestsTimeout = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged(ROBOT_TIMEOUT_LIST_TESTS_TIMEOUT, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    

    private Collection<LanguageServerDefinition.IPreferencesListener> listeners = new CopyOnWriteArraySet<>();

    public static @Nullable RobotPreferences getInstance() throws CancelledException {
        try {
            return ServiceManager.getService(RobotPreferences.class);
        } catch (ProcessCanceledException e) {
            throw new CancelledException(e);
        } catch (Exception e) {
            LOG.error("Error getting RobotPreferences", e);
            return null;
        }
    }

    public void addListener(LanguageServerDefinition.IPreferencesListener listener) {
        listeners.add(listener);
    }

    public void removeListener(LanguageServerDefinition.IPreferencesListener listener) {
        listeners.remove(listener);
    }

}