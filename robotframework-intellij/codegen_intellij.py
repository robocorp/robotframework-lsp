import os
TEMPLATE_ROBOT_PREFERENCES_PAGE = '''package robocorp.robot.intellij;

import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.NlsContexts;
import com.intellij.ui.components.JBLabel;
import com.intellij.ui.components.JBTextArea;
import com.intellij.ui.components.JBTextField;
import com.intellij.util.ui.FormBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import robocorp.lsp.intellij.LanguageServerDefinition;

import javax.swing.*;


// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
class {{ preferences_component_class }} {

    private final JPanel panel;
    {% for preference in preferences %}
    private final JBTextField {{ preference['java_name'] }} = new JBTextField();{% endfor %}

    public {{ preferences_component_class }}() {
        panel = FormBuilder.createFormBuilder()
                {% for preference in preferences %}.addLabeledComponent(new JBLabel("{{ preference['visible_name'] }}"), {{ preference['java_name'] }}, 1, false)
                .addComponent(createJTextArea("{{ preference['description'] }}"))
                {% endfor %}
                .addComponentFillVertically(new JPanel(), 0)
                .getPanel();
    }

    private JBTextArea createJTextArea(String text) {
        JBTextArea f = new JBTextArea();
        f.setText(text);
        f.setEditable(false);
        f.setBackground(null);
        f.setBorder(null);
        f.setFont(UIManager.getFont("Label.font"));
        return f;
    }

    public JPanel getPanel() {
        return panel;
    }

    public JComponent getPreferredFocusedComponent() {
        return {{ preferred_focused_component }};
    }

    {% for preference in preferences %}
    @NotNull
    public String {{ preference['getter_name'] }}() {
        return {{ preference['java_name'] }}.getText();
    }

    public void {{ preference['setter_name'] }} (@NotNull String newText) {
        {{ preference['java_name'] }}.setText(newText);
    }
    {% endfor %}

}

// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
public class {{ class_ }} implements Configurable {
    {% if require_project %}
    private Project project;

    public {{ class_ }}(Project project){
        if(project == null){
            throw new AssertionError("Project must not be null.");
        }
        this.project = project;
    }
    {% endif %}
    private {{ preferences_component_class }} component;

    @Override
    public @NlsContexts.ConfigurableName String getDisplayName() {
        return "{{ display_name }}";
    }

    @Override
    public JComponent getPreferredFocusedComponent() {
        return component.getPreferredFocusedComponent();
    }

    @Override
    public @Nullable JComponent createComponent() {
        component = new {{ preferences_component_class }}();
        return component.getPanel();
    }

    @Override
    public boolean isModified() {
        {{ preferences_class }} settings = null;
        try {
            settings = {{ preferences_class }}.getInstance({% if require_project %}project{% endif %});
        } catch (CancelledException e) {
            return false;
        }
        {% for preference in preferences %}
        {% if (preference['type'] in ['string', 'array', 'object'] or True) %}if(!settings.{{ preference['getter_name'] }}().equals(component.{{ preference['getter_name']}}())){
            return true;
        }
        {% else %}if(settings.{{ preference['java_name'] }} != component.{{ preference['getter_name']}}()){
            return false;
        }{% endif %}{% endfor %}
        return false;
    }

    @Override
    public void reset() {
        {{ preferences_class }} settings = null;
        try {
            settings = {{ preferences_class }}.getInstance({% if require_project %}project{% endif %});
        } catch (CancelledException e) {
            return;
        }
        {% for preference in preferences %}
        component.{{ preference['setter_name']}}(settings.{{ preference['getter_name'] }}());{% endfor %}
    }

    @Override
    public void apply() throws ConfigurationException {
        {{ preferences_class }} settings = null;
        try {
            settings = {{ preferences_class }}.getInstance({% if require_project %}project{% endif %});
        } catch (CancelledException e) {
            return;
        }
        String s;
        {% for preference in preferences %}
        s = settings.{{ preference['validate_name'] }}(component.{{ preference['getter_name']}}());
        if(!s.isEmpty()) {
            throw new ConfigurationException("Error in {{ preference['visible_name'] }}:\\n" + s);
        }{% endfor %}
        {% for preference in preferences %}
        settings.{{ preference['setter_name'] }}(component.{{ preference['getter_name']}}());{% endfor %}
    }
}
'''

TEMPLATE_ROBOT_PREFERENCES = '''package robocorp.robot.intellij;

import com.google.gson.*;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.progress.ProcessCanceledException;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import robocorp.lsp.intellij.LanguageServerDefinition;

import java.util.Collection;
import java.util.concurrent.CopyOnWriteArraySet;


class {% if require_project %}RobotProjectState{% else %}RobotState{% endif %} {
    {% for preference in preferences %}
    public String {{ preference['java_name'] }} = "";{% endfor %}
}

// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
@State(name = "{{ class_ }}", storages = {@Storage("{{ class_ }}.xml")})
public class {{ class_ }} implements PersistentStateComponent<RobotState> {

    {% for preference in preferences %}
    public static final String {{ preference['constant_name'] }} = "{{ preference['dotted_name'] }}";{% endfor %}

    private static final Logger LOG = Logger.getInstance({{ class_ }}.class);

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    @Nullable
    @Override
    public RobotState getState() {
        RobotState robotState = new RobotState();
        {% for preference in preferences %}
        robotState.{{ preference['java_name'] }} = {{ preference['getter_name'] }}();{% endfor %}
        return robotState;
    }

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    @Override
    public void loadState(@NotNull RobotState robotState) {
        {% for preference in preferences %}
        {{ preference['setter_name'] }}(robotState.{{ preference['java_name'] }});{% endfor %}
    }

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    public JsonObject asJsonObject() {
        JsonObject jsonObject = new JsonObject();
        {% for preference in preferences %}
        if(!{{ preference['java_name'] }}.isEmpty()){
            {% if ("g." in preference['json_load']) %}Gson g = new Gson();{% endif %}
            try {
                jsonObject.add({{ preference['constant_name'] }}, {{ preference['json_load'] }});
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        {% endfor %}
        return jsonObject;
    }

    {% for preference in preferences %}
    private String {{ preference['java_name'] }} = "";

    public @NotNull String {{ preference['getter_name'] }}() {
        return {{ preference['java_name'] }};
    }

    public @Nullable {{ preference['java_json_type'] }} {{ preference['getter_name'] }}AsJson() {
        if({{ preference['java_name'] }}.isEmpty()){
            return null;
        }
        {% if ("g." in preference['json_load']) %}Gson g = new Gson();{% endif %}
        return {{ preference['json_load'] }};
    }

    public @NotNull String {{ preference['validate_name'] }}(String {{ preference['java_name'] }}) {
        if({{ preference['java_name'] }}.isEmpty()) {
            return "";
        }
        try {
            {% if ("g." in preference['json_load']) %}Gson g = new Gson();{% endif %}
            {{ preference['json_load'] }};
            {% if preference.get('enum') %} {% for enum_value in preference.get('enum') %}
            if({{ preference['java_name'] }}.equalsIgnoreCase("{{ enum_value }}")){
                return "";
            }{% endfor %}
            return "Unexpected value: " + {{ preference['java_name'] }};
            {% else %}
            return "";
            {% endif %}
        } catch(Exception e) {
            return e.toString();
        }
    }

    public void {{ preference['setter_name'] }}(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals({{ preference['java_name'] }})) {
            return;
        }
        String old = {{ preference['java_name'] }};
        {{ preference['java_name'] }} = s;
        for (LanguageServerDefinition.IPreferencesListener listener : listeners) {
            try {
                listener.onChanged({{ preference['constant_name'] }}, old, s);
            } catch (CancelledException e) {
                // just ignore at this point
            }
        }
    }
    {% endfor %}

    private Collection<LanguageServerDefinition.IPreferencesListener> listeners = new CopyOnWriteArraySet<>();

    public static @Nullable {{ class_ }} getInstance({% if require_project %}Project project{% endif %}) throws CancelledException {
        try {
            return ServiceManager.getService({% if require_project %}project, {% endif %}{{ class_ }}.class);
        } catch (ProcessCanceledException e) {
            throw new CancelledException(e);
        } catch (Exception e) {
            LOG.error("Error getting {{ class_ }}", e);
            return null;
        }
    }

    public void addListener(LanguageServerDefinition.IPreferencesListener listener) {
        listeners.add(listener);
    }

    public void removeListener(LanguageServerDefinition.IPreferencesListener listener) {
        listeners.remove(listener);
    }

}
'''


def camel_to_snake(name):
    import re
    name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()


IGNORE_PREFERENCES_NOT_APPLICABLE_TO_INTELLIJ = (
    "robot.editor.4spacesTab",
    "robot.interactiveConsole.arguments",
    "robot.codeLens.enable",
    "robot.codeLens.run.enable",
    "robot.codeLens.interactiveConsole.enable",
    "robot.run.peekError.level",
    "robot.run.peekError.showSummary",
    "robot.run.peekError.showErrorsInCallers",
    )


def main():
    import json
    from jinja2 import Template
    import textwrap

    preferences = []
    this_dir = os.path.dirname(__file__)
    with open(os.path.join(this_dir, '..', 'robotframework-ls', 'package.json')) as stream:
        package_json = json.load(stream)
        properties = package_json['contributes']['configuration']['properties']
        for prop_name, prop_value in properties.items():
            if prop_name in IGNORE_PREFERENCES_NOT_APPLICABLE_TO_INTELLIJ:
                continue

            description = prop_value.get('description', '').replace('"', '\\"')
            description = description.replace('Requires a restart to take effect.', '')
            final_desc = ''
            description = description.replace('\n', ' ')
            description = description.replace('(', '\\n(')
            description = description.replace('\\n(s)', '(s)')  # Undo the (s) case
            for i, d in enumerate(description.split('\\n')):
                if i > 0:
                    final_desc += '\\n'
                line_len = 100
                if prop_name == 'robot.completions.keywords.format':
                    i = d.index('One of')
                    d = '\\n'.join((d[:i].strip(), d[i:].strip()))

                else:
                    d = '\\n'.join(textwrap.wrap(d, line_len))
                final_desc += d
            if prop_value['type'] in ['array', 'object']:
                final_desc += '\\nNote: expected format: JSON ' + prop_value['type'].title()
            elif prop_value['type'] in ['boolean']:
                final_desc += '\\nNote: expected \'true\' or \'false\''

            final_desc += '\\n'

            prop_value['dotted_name'] = prop_name
            prop_value['constant_name'] = camel_to_snake(prop_name).replace('.', '_').replace('-', '_').upper()
            visible_name = prop_name.replace('robot.', '')
            prop_value['visible_name'] = camel_to_snake(visible_name).replace('.', ' ').replace('-', ' ').replace('_', ' ').title()
            base_name = camel_to_snake(prop_name).replace('.', ' ').replace('-', ' ').replace('_', ' ').title().replace(' ', '')
            java_name = prop_value['java_name'] = base_name[0].lower() + base_name[1:]
            prop_value['getter_name'] = 'get' + base_name[0].upper() + base_name[1:]
            prop_value['setter_name'] = 'set' + base_name[0].upper() + base_name[1:]
            prop_value['validate_name'] = 'validate' + base_name[0].upper() + base_name[1:]

            if prop_value['type'] == 'array':
                json_load = f'g.fromJson({java_name}, JsonArray.class)'
                prop_value['java_json_type'] = 'JsonArray'

            elif prop_value['type'] == 'object':
                json_load = f'g.fromJson({java_name}, JsonObject.class)'
                prop_value['java_json_type'] = 'JsonObject'

            elif prop_value['type'] == 'string':
                json_load = f'new JsonPrimitive({java_name})'
                prop_value['java_json_type'] = 'JsonPrimitive'

            elif prop_value['type'] == 'number':
                json_load = f'new JsonPrimitive(Integer.parseInt({java_name}))'
                prop_value['java_json_type'] = 'JsonPrimitive'

            elif prop_value['type'] == 'boolean':
                json_load = f'new JsonPrimitive(Boolean.parseBoolean({java_name}))'
                prop_value['java_json_type'] = 'JsonPrimitive'

            else:
                raise AssertionError('Unhandled type: ' + prop_value['type'])

            prop_value['description'] = final_desc
            prop_value['json_load'] = json_load

            preferences.append(prop_value)

    #------------------------------------------------------------------------------
    target = os.path.join(this_dir, 'src', 'main', 'java', 'robocorp', 'robot', 'intellij', 'RobotPreferencesPage.java')
    kwargs = dict(
        preferences_component_class='RobotPreferencesComponent',
        class_='RobotPreferencesPage',
        preferred_focused_component='robotLanguageServerPython',
        display_name='Robot Framework (Global)',
        preferences_class='RobotPreferences',
        require_project=False,
    )
    new_contents = Template(TEMPLATE_ROBOT_PREFERENCES_PAGE).render(preferences=preferences, **kwargs)
    with open(target, 'w') as stream:
        stream.write(new_contents)
    print('Written: ', target)

    #------------------------------------------------------------------------------
    kwargs = dict(
        preferences_component_class='RobotProjectPreferencesComponent',
        class_='RobotProjectPreferencesPage',
        preferred_focused_component='robotPythonExecutable',
        display_name='Robot Framework (Project)',
        preferences_class='RobotProjectPreferences',
        require_project=True,
    )
    target = os.path.join(this_dir, 'src', 'main', 'java', 'robocorp', 'robot', 'intellij', 'RobotProjectPreferencesPage.java')
    project_preferences = preferences
    new_contents = Template(TEMPLATE_ROBOT_PREFERENCES_PAGE).render(preferences=project_preferences, **kwargs)
    with open(target, 'w') as stream:
        stream.write(new_contents)
    print('Written: ', target)

    #------------------------------------------------------------------------------
    kwargs = dict(
        class_='RobotPreferences',
        preferences_class='RobotPreferences',
        require_project=False,
    )
    target = os.path.join(this_dir, 'src', 'main', 'java', 'robocorp', 'robot', 'intellij', 'RobotPreferences.java')
    new_contents = Template(TEMPLATE_ROBOT_PREFERENCES).render(preferences=preferences, **kwargs)
    with open(target, 'w') as stream:
        stream.write(new_contents)
    print('Written: ', target)

    #------------------------------------------------------------------------------
    kwargs = dict(
        class_='RobotProjectPreferences',
        preferences_class='RobotProjectPreferences',
        require_project=True,
    )
    target = os.path.join(this_dir, 'src', 'main', 'java', 'robocorp', 'robot', 'intellij', 'RobotProjectPreferences.java')
    new_contents = Template(TEMPLATE_ROBOT_PREFERENCES).render(preferences=project_preferences, **kwargs)
    with open(target, 'w') as stream:
        stream.write(new_contents)
    print('Written: ', target)


if __name__ == '__main__':
    main()
